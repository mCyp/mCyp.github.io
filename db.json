{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/CNAME.bak","path":"CNAME.bak","modified":1,"renderable":0},{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":1,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":1,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":1,"renderable":1},{"_id":"source/assets/blogImg/Joe.jpg","path":"assets/blogImg/Joe.jpg","modified":1,"renderable":0},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6f34b1e151bfd6e6fddb4ca39eff15aa94ef5198","modified":1549501356467},{"_id":"source/CNAME.bak","hash":"713b895d867b9c76502ed6381b21fab202099f69","modified":1549501356468},{"_id":"source/.DS_Store","hash":"06aa98b5f576675d667f1b364f22bcb7ab34691b","modified":1549501356467},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1549417921356},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1549417921356},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1549417921357},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1549417921357},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1549417921357},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1549417921357},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1549417921357},{"_id":"themes/yilia/_config.yml","hash":"be55da7214594876b42ff33a26f790f2edb129a2","modified":1549515987577},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1549417921366},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1549417921384},{"_id":"source/assets/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1549506157554},{"_id":"source/_posts/.DS_Store","hash":"e9727a7aad81907469f011555dc9b4cad533b840","modified":1549506299304},{"_id":"source/_posts/2018-12-16-PhotoPagerView.md","hash":"6ebcdc61f6f76b2cddce3e9d9fd7a73674428ae0","modified":1549437235537},{"_id":"source/_posts/2019-01-13-一文读懂Scroller.md","hash":"c99fe710fe4f7a7f96354077db4a2d7e465a86a7","modified":1549459491260},{"_id":"source/_posts/2018-12-31-新年总结.md","hash":"e10133ffd9c895e537dd05dacf6291f6374f31c1","modified":1549459237130},{"_id":"source/_posts/2019-01-20-仿掌阅实现书籍打开动画.md","hash":"9d21835d73f10ed0668820baa8ddffd1b4ebda01","modified":1549437301514},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1549417921351},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1549417921349},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1549417894749},{"_id":"themes/yilia/.git/index","hash":"2c7d5e841ce30b73ebcd5371196ffb364fbc3781","modified":1549511054609},{"_id":"themes/yilia/.git/packed-refs","hash":"76b1aa9479dd3de329935b6d94a6624c5f716d23","modified":1549417921347},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1549417921357},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1549417921358},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1549417921358},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1549417921358},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1549417921358},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1549417921358},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1549417921358},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1549417921365},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1549417921365},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1549417921365},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1549417921365},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1549417921365},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1549417921365},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1549417921366},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"ddf6e2c6b953c2c59a3c271e6070010a4cc81cf9","modified":1549417921381},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1549417921384},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1549417921366},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1549417921378},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1549417921364},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1549417921382},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1549417921383},{"_id":"source/assets/blogImg/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1549506297000},{"_id":"source/assets/blogImg/Joe.jpg","hash":"d68dfd805311ae0486c77c9f40ca85b2d2c64145","modified":1545444745363},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1549417894753},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1549417894750},{"_id":"themes/yilia/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1549417894753},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1549417894754},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1549417894755},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1549417894752},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1549417894755},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1549417894751},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1549417894754},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1549417894754},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1549417894756},{"_id":"themes/yilia/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1549417894749},{"_id":"themes/yilia/.git/logs/HEAD","hash":"ad3e24dcfc6584329039bc30af1fd7f4b4d75fc3","modified":1549417921350},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1549417921359},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1549417921359},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1549417921359},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"630c6ec866d056657d3d91e34b4c64eb993c0654","modified":1549417921359},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1549417921359},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1549417921360},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1549417921361},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1549417921361},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1549417921364},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1549417921364},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1549417921378},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1549417921379},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1549417921380},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1549417921380},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1549417921380},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1549417921380},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1549417921380},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1549417921381},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1549417921381},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1549417921366},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1549417921366},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1549417921367},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1549417921367},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1549417921367},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1549417921368},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1549417921368},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1549417921368},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1549417921369},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1549417921370},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1549417921372},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1549417921372},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1549417921372},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1549417921372},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1549417921373},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1549417921373},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1549417921373},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1549417921373},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1549417921373},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1549417921374},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1549417921374},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1549417921374},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1549417921374},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1549417921374},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1549417921374},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1549417921375},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1549417921375},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1549417921376},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1549417921376},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1549417921376},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1549417921376},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1549417921376},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1549417921377},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1549417921377},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1549417921377},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1549417921377},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1549417921377},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1549417921378},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1549417921378},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1549417921364},{"_id":"source/_posts/.Archive/2.md/2017-04-21 11-15-26.md","hash":"6efdfcce09cfadc65fae2c1d5c540882e7c55e1d","modified":1549501356468},{"_id":"source/_posts/.Archive/2.md/2017-04-21 11-15-26.md.bak","hash":"05b7a92664dbc9edbc468745ec0676045ba466e7","modified":1549501356468},{"_id":"themes/yilia/.git/objects/pack/pack-f314614ca6f4589436f277ed6373221fcadfe8d0.idx","hash":"26df604a99c1aa2963107326d0cce75cbe251d0f","modified":1549417921337},{"_id":"themes/yilia/.git/refs/heads/master","hash":"4ed77da1a2617db0e77c3e3e190a1c79c16dfb9a","modified":1549417921350},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1549417921361},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1549417921361},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1549417921362},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1549417921362},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1549417921362},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1549417921362},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1549417921363},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1549417921362},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1549417921363},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1549417921363},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1549417921369},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1549417921369},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1549417921369},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1549417921370},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1549417921370},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1549417921370},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1549417921371},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1549417921372},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1549417921372},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1549417921373},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1549417921371},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1549417921371},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"ad3e24dcfc6584329039bc30af1fd7f4b4d75fc3","modified":1549417921350},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1549417921349},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"ad3e24dcfc6584329039bc30af1fd7f4b4d75fc3","modified":1549417921349},{"_id":"themes/yilia/.git/objects/pack/pack-f314614ca6f4589436f277ed6373221fcadfe8d0.pack","hash":"fe15de4b2db11a1693751c9c9f65a68e3d269b96","modified":1549417921337}],"Category":[],"Data":[],"Page":[],"Post":[{"layout":"post","title":"造一个轮子-PhotoPagerView","date":"2018-12-16T00:52:00.000Z","comments":1,"_content":"\n![图片.gif](http://plew0vk60.bkt.clouddn.com//blog/181231/translate.gif)\n\n<!-- more -->\n\n\n\n\n\n\n\n## 1.使用场景\n需要使用到照片查看功能的时候\n\n## 2.效果\n![缩放动画.gif](https://upload-images.jianshu.io/upload_images/9271486-33efed404622071a.gif?imageMogr2/auto-orient/strip)\n\n![完整过程和平移动画.gif](https://upload-images.jianshu.io/upload_images/9271486-9a61c0cb81219492.gif?imageMogr2/auto-orient/strip)\n\n## 3.思路\n![PhotoPagerView的思路.png](https://upload-images.jianshu.io/upload_images/9271486-d7e758cbc32449de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n实现思路其实很简单，利用已知的```ViewPager```和[PhotoView](https://github.com/chrisbanes/PhotoView) 组合成新的控件，迎合日常的开发需求。\nGitHub地址：[https://github.com/mCyp/PhotoPagerView](https://github.com/mCyp/PhotoPagerView)\n## 4.代码\n关于代码这一块的话并不打算介绍了，因为这是一个初级库，代码简单，整合出来只是为了项目的需要，想要代码的话可以直接查看源码。\n## 5.使用\n传入的参数说明：先传入bitmaps再配置当前的需要使用的属性。\n```\nList<Bitmap> bitmaps = ...;\nPhotoPageView pageView = new PhotoPageView.Builder(MainActivity.this)\n                        .addBitmaps(bitmaps) // 传入Bitmaps\n                        .showDelete(true) // 是否可以删除\n                        .setDeleteListener(new PhotoPageView.DeleteListener() {\n                            @Override\n                            public void ondelete(int position) {\n                                //  删除指定位置之后的回调\n                                Toast.makeText(MainActivity.this,\"删除的位置是：\"+position,Toast.LENGTH_SHORT).show();\n                            }\n                        })\n                        .showAnimation(true) // 是否显示动画\n                        .setAnimationType(PhotoPageView.ANIMATION_TRANSLATION) // 动画的类型\n                        .setStartPosition(0) // 设置起始的位置\n                        .create();\n pageView.show();\n```\n动画类型：\n- ` ANIMATION_SCALE_ALPHA` 缩放透明度动画\n- `ANIMATION_TRANSLATION` 平移动画\n\n### 6.注意\n因为使用到了`Bitmap`，所以得注意一下OOM的问题，库里面的`FileUtils`工具类提供了解决办法，详见代码：[位置](https://github.com/mCyp/PhotoPagerView/blob/master/PhotoPagerView/src/main/java/com/orient/photopagerview/utils/FileUtils.java)，你也可以使用该方法通过提供一个地址，解析出你需要的`List<Bitmap>`，\n代码：\n```\n     /**\n        get bitmaps\n     */\n    public static List<Bitmap> getAlbumByPath(String path, String Extension, Activity activity) {\n        List<Bitmap> bitmaps = new LinkedList<>();                //结果 List\n        File[] files = new File(path).listFiles();\n        if (files == null)\n            return null;\n        InputStream inputStream = null;\n\n        try {\n            for (File f : files) {\n                if (f.isFile()) {\n                    if (f.getPath().substring(f.getPath().length() - Extension.length()).equals(Extension)) {\n                        BitmapFactory.Options options = new BitmapFactory.Options();\n                        options.inJustDecodeBounds = true;\n                        options.inPreferredConfig = Bitmap.Config.RGB_565;\n                        inputStream = new FileInputStream(f);\n                        BitmapFactory.decodeStream(inputStream, null, options);\n                        options.inSampleSize = calculateInSampleSize(options,activity.getWindow().getDecorView().getWidth(),activity.getWindow().getDecorView().getHeight());\n                        options.inJustDecodeBounds = false;\n                        inputStream = new FileInputStream(f);\n                        Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, options);\n                        if (bitmap != null) {\n                            bitmaps.add(bitmap);\n                        }\n                    }\n                }\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        return bitmaps;\n    }\n\n     /*\n        to prevent oom\n     */\n    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n\n        if (height > reqHeight || width > reqWidth) {\n\n            final int halfHeight = height / 2;\n            final int halfWidth = width / 2;\n\n            while ((halfHeight / inSampleSize) >= reqHeight\n                    && (halfWidth / inSampleSize) >= reqWidth) {\n                inSampleSize *= 2;\n            }\n        }\n\n        return inSampleSize;\n    }\n```\n### 总结\n大概内容就是这样了，有问题可以提出。地址：[PhotoPagerView](https://github.com/mCyp/PhotoPagerView)\n\n\n","source":"_posts/2018-12-16-PhotoPagerView.md","raw":"---\nlayout: post\ntitle:  \"造一个轮子-PhotoPagerView\"\ndate: 2018-12-16 08:52\ncomments: true\ntags: \n\t- Android\n\t- 自定义View\n---\n\n![图片.gif](http://plew0vk60.bkt.clouddn.com//blog/181231/translate.gif)\n\n<!-- more -->\n\n\n\n\n\n\n\n## 1.使用场景\n需要使用到照片查看功能的时候\n\n## 2.效果\n![缩放动画.gif](https://upload-images.jianshu.io/upload_images/9271486-33efed404622071a.gif?imageMogr2/auto-orient/strip)\n\n![完整过程和平移动画.gif](https://upload-images.jianshu.io/upload_images/9271486-9a61c0cb81219492.gif?imageMogr2/auto-orient/strip)\n\n## 3.思路\n![PhotoPagerView的思路.png](https://upload-images.jianshu.io/upload_images/9271486-d7e758cbc32449de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n实现思路其实很简单，利用已知的```ViewPager```和[PhotoView](https://github.com/chrisbanes/PhotoView) 组合成新的控件，迎合日常的开发需求。\nGitHub地址：[https://github.com/mCyp/PhotoPagerView](https://github.com/mCyp/PhotoPagerView)\n## 4.代码\n关于代码这一块的话并不打算介绍了，因为这是一个初级库，代码简单，整合出来只是为了项目的需要，想要代码的话可以直接查看源码。\n## 5.使用\n传入的参数说明：先传入bitmaps再配置当前的需要使用的属性。\n```\nList<Bitmap> bitmaps = ...;\nPhotoPageView pageView = new PhotoPageView.Builder(MainActivity.this)\n                        .addBitmaps(bitmaps) // 传入Bitmaps\n                        .showDelete(true) // 是否可以删除\n                        .setDeleteListener(new PhotoPageView.DeleteListener() {\n                            @Override\n                            public void ondelete(int position) {\n                                //  删除指定位置之后的回调\n                                Toast.makeText(MainActivity.this,\"删除的位置是：\"+position,Toast.LENGTH_SHORT).show();\n                            }\n                        })\n                        .showAnimation(true) // 是否显示动画\n                        .setAnimationType(PhotoPageView.ANIMATION_TRANSLATION) // 动画的类型\n                        .setStartPosition(0) // 设置起始的位置\n                        .create();\n pageView.show();\n```\n动画类型：\n- ` ANIMATION_SCALE_ALPHA` 缩放透明度动画\n- `ANIMATION_TRANSLATION` 平移动画\n\n### 6.注意\n因为使用到了`Bitmap`，所以得注意一下OOM的问题，库里面的`FileUtils`工具类提供了解决办法，详见代码：[位置](https://github.com/mCyp/PhotoPagerView/blob/master/PhotoPagerView/src/main/java/com/orient/photopagerview/utils/FileUtils.java)，你也可以使用该方法通过提供一个地址，解析出你需要的`List<Bitmap>`，\n代码：\n```\n     /**\n        get bitmaps\n     */\n    public static List<Bitmap> getAlbumByPath(String path, String Extension, Activity activity) {\n        List<Bitmap> bitmaps = new LinkedList<>();                //结果 List\n        File[] files = new File(path).listFiles();\n        if (files == null)\n            return null;\n        InputStream inputStream = null;\n\n        try {\n            for (File f : files) {\n                if (f.isFile()) {\n                    if (f.getPath().substring(f.getPath().length() - Extension.length()).equals(Extension)) {\n                        BitmapFactory.Options options = new BitmapFactory.Options();\n                        options.inJustDecodeBounds = true;\n                        options.inPreferredConfig = Bitmap.Config.RGB_565;\n                        inputStream = new FileInputStream(f);\n                        BitmapFactory.decodeStream(inputStream, null, options);\n                        options.inSampleSize = calculateInSampleSize(options,activity.getWindow().getDecorView().getWidth(),activity.getWindow().getDecorView().getHeight());\n                        options.inJustDecodeBounds = false;\n                        inputStream = new FileInputStream(f);\n                        Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, options);\n                        if (bitmap != null) {\n                            bitmaps.add(bitmap);\n                        }\n                    }\n                }\n            }\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } finally {\n            if (inputStream != null) {\n                try {\n                    inputStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        return bitmaps;\n    }\n\n     /*\n        to prevent oom\n     */\n    public static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n        final int height = options.outHeight;\n        final int width = options.outWidth;\n        int inSampleSize = 1;\n\n        if (height > reqHeight || width > reqWidth) {\n\n            final int halfHeight = height / 2;\n            final int halfWidth = width / 2;\n\n            while ((halfHeight / inSampleSize) >= reqHeight\n                    && (halfWidth / inSampleSize) >= reqWidth) {\n                inSampleSize *= 2;\n            }\n        }\n\n        return inSampleSize;\n    }\n```\n### 总结\n大概内容就是这样了，有问题可以提出。地址：[PhotoPagerView](https://github.com/mCyp/PhotoPagerView)\n\n\n","slug":"2018-12-16-PhotoPagerView","published":1,"updated":"2019-02-06T07:13:55.537Z","photos":[],"link":"","_id":"cjru5wh1l0000ucxpa2ru4m2q","content":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/181231/translate.gif\" alt=\"图片.gif\"></p>\n<a id=\"more\"></a>\n<h2 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1.使用场景\"></a>1.使用场景</h2><p>需要使用到照片查看功能的时候</p>\n<h2 id=\"2-效果\"><a href=\"#2-效果\" class=\"headerlink\" title=\"2.效果\"></a>2.效果</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-33efed404622071a.gif?imageMogr2/auto-orient/strip\" alt=\"缩放动画.gif\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-9a61c0cb81219492.gif?imageMogr2/auto-orient/strip\" alt=\"完整过程和平移动画.gif\"></p>\n<h2 id=\"3-思路\"><a href=\"#3-思路\" class=\"headerlink\" title=\"3.思路\"></a>3.思路</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-d7e758cbc32449de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PhotoPagerView的思路.png\"><br>实现思路其实很简单，利用已知的<figure class=\"highlight plain\"><figcaption><span>组合成新的控件，迎合日常的开发需求。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub地址：[https://github.com/mCyp/PhotoPagerView](https://github.com/mCyp/PhotoPagerView)</span><br><span class=\"line\">## 4.代码</span><br><span class=\"line\">关于代码这一块的话并不打算介绍了，因为这是一个初级库，代码简单，整合出来只是为了项目的需要，想要代码的话可以直接查看源码。</span><br><span class=\"line\">## 5.使用</span><br><span class=\"line\">传入的参数说明：先传入bitmaps再配置当前的需要使用的属性。</span><br></pre></td></tr></table></figure></p>\n<p>List<bitmap> bitmaps = …;<br>PhotoPageView pageView = new PhotoPageView.Builder(MainActivity.this)<br>                        .addBitmaps(bitmaps) // 传入Bitmaps<br>                        .showDelete(true) // 是否可以删除<br>                        .setDeleteListener(new PhotoPageView.DeleteListener() {<br>                            @Override<br>                            public void ondelete(int position) {<br>                                //  删除指定位置之后的回调<br>                                Toast.makeText(MainActivity.this,”删除的位置是：”+position,Toast.LENGTH_SHORT).show();<br>                            }<br>                        })<br>                        .showAnimation(true) // 是否显示动画<br>                        .setAnimationType(PhotoPageView.ANIMATION_TRANSLATION) // 动画的类型<br>                        .setStartPosition(0) // 设置起始的位置<br>                        .create();<br> pageView.show();<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动画类型：</span><br><span class=\"line\"><span class=\"bullet\">- </span><span class=\"code\">` ANIMATION_SCALE_ALPHA`</span> 缩放透明度动画</span><br><span class=\"line\"><span class=\"bullet\">- </span><span class=\"code\">`ANIMATION_TRANSLATION`</span> 平移动画</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 6.注意</span></span><br><span class=\"line\">因为使用到了<span class=\"code\">`Bitmap`</span>，所以得注意一下OOM的问题，库里面的<span class=\"code\">`FileUtils`</span>工具类提供了解决办法，详见代码：[<span class=\"string\">位置</span>](<span class=\"link\">https://github.com/mCyp/PhotoPagerView/blob/master/PhotoPagerView/src/main/java/com/orient/photopagerview/utils/FileUtils.java</span>)，你也可以使用该方法通过提供一个地址，解析出你需要的<span class=\"code\">`List&lt;Bitmap&gt;`</span>，</span><br><span class=\"line\">代码：</span><br></pre></td></tr></table></figure></bitmap></p>\n<pre><code> /**\n    get bitmaps\n */\npublic static List&lt;Bitmap&gt; getAlbumByPath(String path, String Extension, Activity activity) {\n    List&lt;Bitmap&gt; bitmaps = new LinkedList&lt;&gt;();                //结果 List\n    File[] files = new File(path).listFiles();\n    if (files == null)\n        return null;\n    InputStream inputStream = null;\n\n    try {\n        for (File f : files) {\n            if (f.isFile()) {\n                if (f.getPath().substring(f.getPath().length() - Extension.length()).equals(Extension)) {\n                    BitmapFactory.Options options = new BitmapFactory.Options();\n                    options.inJustDecodeBounds = true;\n                    options.inPreferredConfig = Bitmap.Config.RGB_565;\n                    inputStream = new FileInputStream(f);\n                    BitmapFactory.decodeStream(inputStream, null, options);\n                    options.inSampleSize = calculateInSampleSize(options,activity.getWindow().getDecorView().getWidth(),activity.getWindow().getDecorView().getHeight());\n                    options.inJustDecodeBounds = false;\n                    inputStream = new FileInputStream(f);\n                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, options);\n                    if (bitmap != null) {\n                        bitmaps.add(bitmap);\n                    }\n                }\n            }\n        }\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } finally {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    return bitmaps;\n}\n\n /*\n    to prevent oom\n */\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height &gt; reqHeight || width &gt; reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        while ((halfHeight / inSampleSize) &gt;= reqHeight\n                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}\n</code></pre><p>```</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>大概内容就是这样了，有问题可以提出。地址：<a href=\"https://github.com/mCyp/PhotoPagerView\" target=\"_blank\" rel=\"noopener\">PhotoPagerView</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/181231/translate.gif\" alt=\"图片.gif\"></p>","more":"<h2 id=\"1-使用场景\"><a href=\"#1-使用场景\" class=\"headerlink\" title=\"1.使用场景\"></a>1.使用场景</h2><p>需要使用到照片查看功能的时候</p>\n<h2 id=\"2-效果\"><a href=\"#2-效果\" class=\"headerlink\" title=\"2.效果\"></a>2.效果</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-33efed404622071a.gif?imageMogr2/auto-orient/strip\" alt=\"缩放动画.gif\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-9a61c0cb81219492.gif?imageMogr2/auto-orient/strip\" alt=\"完整过程和平移动画.gif\"></p>\n<h2 id=\"3-思路\"><a href=\"#3-思路\" class=\"headerlink\" title=\"3.思路\"></a>3.思路</h2><p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-d7e758cbc32449de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"PhotoPagerView的思路.png\"><br>实现思路其实很简单，利用已知的<figure class=\"highlight plain\"><figcaption><span>组合成新的控件，迎合日常的开发需求。</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GitHub地址：[https://github.com/mCyp/PhotoPagerView](https://github.com/mCyp/PhotoPagerView)</span><br><span class=\"line\">## 4.代码</span><br><span class=\"line\">关于代码这一块的话并不打算介绍了，因为这是一个初级库，代码简单，整合出来只是为了项目的需要，想要代码的话可以直接查看源码。</span><br><span class=\"line\">## 5.使用</span><br><span class=\"line\">传入的参数说明：先传入bitmaps再配置当前的需要使用的属性。</span><br></pre></td></tr></table></figure></p>\n<p>List<bitmap> bitmaps = …;<br>PhotoPageView pageView = new PhotoPageView.Builder(MainActivity.this)<br>                        .addBitmaps(bitmaps) // 传入Bitmaps<br>                        .showDelete(true) // 是否可以删除<br>                        .setDeleteListener(new PhotoPageView.DeleteListener() {<br>                            @Override<br>                            public void ondelete(int position) {<br>                                //  删除指定位置之后的回调<br>                                Toast.makeText(MainActivity.this,”删除的位置是：”+position,Toast.LENGTH_SHORT).show();<br>                            }<br>                        })<br>                        .showAnimation(true) // 是否显示动画<br>                        .setAnimationType(PhotoPageView.ANIMATION_TRANSLATION) // 动画的类型<br>                        .setStartPosition(0) // 设置起始的位置<br>                        .create();<br> pageView.show();<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动画类型：</span><br><span class=\"line\"><span class=\"bullet\">- </span><span class=\"code\">` ANIMATION_SCALE_ALPHA`</span> 缩放透明度动画</span><br><span class=\"line\"><span class=\"bullet\">- </span><span class=\"code\">`ANIMATION_TRANSLATION`</span> 平移动画</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 6.注意</span></span><br><span class=\"line\">因为使用到了<span class=\"code\">`Bitmap`</span>，所以得注意一下OOM的问题，库里面的<span class=\"code\">`FileUtils`</span>工具类提供了解决办法，详见代码：[<span class=\"string\">位置</span>](<span class=\"link\">https://github.com/mCyp/PhotoPagerView/blob/master/PhotoPagerView/src/main/java/com/orient/photopagerview/utils/FileUtils.java</span>)，你也可以使用该方法通过提供一个地址，解析出你需要的<span class=\"code\">`List&lt;Bitmap&gt;`</span>，</span><br><span class=\"line\">代码：</span><br></pre></td></tr></table></figure></bitmap></p>\n<pre><code> /**\n    get bitmaps\n */\npublic static List&lt;Bitmap&gt; getAlbumByPath(String path, String Extension, Activity activity) {\n    List&lt;Bitmap&gt; bitmaps = new LinkedList&lt;&gt;();                //结果 List\n    File[] files = new File(path).listFiles();\n    if (files == null)\n        return null;\n    InputStream inputStream = null;\n\n    try {\n        for (File f : files) {\n            if (f.isFile()) {\n                if (f.getPath().substring(f.getPath().length() - Extension.length()).equals(Extension)) {\n                    BitmapFactory.Options options = new BitmapFactory.Options();\n                    options.inJustDecodeBounds = true;\n                    options.inPreferredConfig = Bitmap.Config.RGB_565;\n                    inputStream = new FileInputStream(f);\n                    BitmapFactory.decodeStream(inputStream, null, options);\n                    options.inSampleSize = calculateInSampleSize(options,activity.getWindow().getDecorView().getWidth(),activity.getWindow().getDecorView().getHeight());\n                    options.inJustDecodeBounds = false;\n                    inputStream = new FileInputStream(f);\n                    Bitmap bitmap = BitmapFactory.decodeStream(inputStream, null, options);\n                    if (bitmap != null) {\n                        bitmaps.add(bitmap);\n                    }\n                }\n            }\n        }\n    } catch (FileNotFoundException e) {\n        e.printStackTrace();\n    } finally {\n        if (inputStream != null) {\n            try {\n                inputStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    return bitmaps;\n}\n\n /*\n    to prevent oom\n */\npublic static int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {\n    final int height = options.outHeight;\n    final int width = options.outWidth;\n    int inSampleSize = 1;\n\n    if (height &gt; reqHeight || width &gt; reqWidth) {\n\n        final int halfHeight = height / 2;\n        final int halfWidth = width / 2;\n\n        while ((halfHeight / inSampleSize) &gt;= reqHeight\n                &amp;&amp; (halfWidth / inSampleSize) &gt;= reqWidth) {\n            inSampleSize *= 2;\n        }\n    }\n\n    return inSampleSize;\n}\n</code></pre><p>```</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>大概内容就是这样了，有问题可以提出。地址：<a href=\"https://github.com/mCyp/PhotoPagerView\" target=\"_blank\" rel=\"noopener\">PhotoPagerView</a></p>"},{"layout":"post","title":"2018年度总结","date":"2018-12-31T00:52:00.000Z","comments":0,"_content":"\n![2018年学习的知识.png](http://plew0vk60.bkt.clouddn.com//blog/181231/road.jpg)\n\n<!-- more -->\n\n\n\n\n\n\n\n\n## 操作步骤：\n\n今天已经是2018年12月31日了,回想去年的这个时候,自己已经开始实习了,果真应了那一句老话\n> 上学的时候总在憧憬工作,工作的时候又在怀念学校无忧无虑的时光\n\n但是无论如何,人都应该是向前看的.\n\n## 2018学习进展\n2018年学习的东西还是挺多的:开源了自己第一个库,写完了自己第一个项目,学习了Kotlin等等,下面是我今年学习的内容\n![2018年学习的知识.png](https://upload-images.jianshu.io/upload_images/9271486-c5299aaef3e4d5d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n学习还是比较充实的,不过还有很多内容有待改进:\n1. 学习的Kotlin深度不够,只是停留在简单写写项目上.\n2. Leetcode原来打算每天一题,在论文答辩的那个月断掉了,后面断断续续,一年下来也就写200多道,也没有每种类型的题目做出一些总结.\n3. 学习的课程有的时候过于追求速度,有些东西没有完全搞懂就直接跳过去了.而在[自定义View教程](https://github.com/GcsSloop/AndroidNote)中,学习的效率则过于低下,自定义View利用每天早上的半个小时外加偶尔的晚上时间,学习了三个月,依然没有学完(主要是每个例子自己都敲一边确实占用挺多的时间)\n\n虽然我的学习方法有很多不足,但是也养成了许多不错的习惯,比如说我的生活习惯:\n- 6.30 起床\n- 6.40-7.10 看半个小时的书\n- 12.20-12.50 看关于Java的书籍\n- 18.00-23.00 没做完的工作Or慕课网的课程Or自学\n- 23.00 睡觉\n\n冬天之前还有每周三和周六的打球,这真的是每周最有趣的活动之一.希望自己能够继续坚持这些的良好习惯并提高学习工作效率\n## 2019年目标\n\n希望2019年更加充实,但这一切都需要建立在做好自己的本职工作的基础上,并保持一颗`匠心`,引用大佬的一句话:\n> 同时不要忘了一颗匠心，写好每一段代码，做好每一段注释，控制好每一个线程，对内存和性能有着天然的敏感性，这才是作为一个技术人匠心的表现，也正是这样点点滴滴看起来不那么酷的微小工作，才强有力的支撑起了我们的整个业务。\n\n下面则是我对2019的规划:\n\n![2019年目标.png](https://upload-images.jianshu.io/upload_images/9271486-8eb16f7618a7224b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n妥实基础依然会是我下一年学习的主旋律.\n\n## 生活\n2018其实是一个很神奇的一年\n1. 真的很感谢我的女朋友的陪伴,四年不易,再过两天她就会成为我的老婆,其实我想在2019.1.1领证的,不过由于1.1民政局不上班,只能在1.2领了,开心❤️.\n2. 一直纠结的房子终于也定音了,最终还是要在无锡买房子,现在签完了合同,就等着交完首付搬新家了.对于父母的帮助,感恩却又心怀愧疚.\n\n## 总结\n在成为大牛的路上...\n\n\n","source":"_posts/2018-12-31-新年总结.md","raw":"---\nlayout: post\ntitle:  \"2018年度总结\"\ndate: 2018-12-31 08:52\ncomments: false\ntags: \n\t- 总结\n---\n\n![2018年学习的知识.png](http://plew0vk60.bkt.clouddn.com//blog/181231/road.jpg)\n\n<!-- more -->\n\n\n\n\n\n\n\n\n## 操作步骤：\n\n今天已经是2018年12月31日了,回想去年的这个时候,自己已经开始实习了,果真应了那一句老话\n> 上学的时候总在憧憬工作,工作的时候又在怀念学校无忧无虑的时光\n\n但是无论如何,人都应该是向前看的.\n\n## 2018学习进展\n2018年学习的东西还是挺多的:开源了自己第一个库,写完了自己第一个项目,学习了Kotlin等等,下面是我今年学习的内容\n![2018年学习的知识.png](https://upload-images.jianshu.io/upload_images/9271486-c5299aaef3e4d5d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n学习还是比较充实的,不过还有很多内容有待改进:\n1. 学习的Kotlin深度不够,只是停留在简单写写项目上.\n2. Leetcode原来打算每天一题,在论文答辩的那个月断掉了,后面断断续续,一年下来也就写200多道,也没有每种类型的题目做出一些总结.\n3. 学习的课程有的时候过于追求速度,有些东西没有完全搞懂就直接跳过去了.而在[自定义View教程](https://github.com/GcsSloop/AndroidNote)中,学习的效率则过于低下,自定义View利用每天早上的半个小时外加偶尔的晚上时间,学习了三个月,依然没有学完(主要是每个例子自己都敲一边确实占用挺多的时间)\n\n虽然我的学习方法有很多不足,但是也养成了许多不错的习惯,比如说我的生活习惯:\n- 6.30 起床\n- 6.40-7.10 看半个小时的书\n- 12.20-12.50 看关于Java的书籍\n- 18.00-23.00 没做完的工作Or慕课网的课程Or自学\n- 23.00 睡觉\n\n冬天之前还有每周三和周六的打球,这真的是每周最有趣的活动之一.希望自己能够继续坚持这些的良好习惯并提高学习工作效率\n## 2019年目标\n\n希望2019年更加充实,但这一切都需要建立在做好自己的本职工作的基础上,并保持一颗`匠心`,引用大佬的一句话:\n> 同时不要忘了一颗匠心，写好每一段代码，做好每一段注释，控制好每一个线程，对内存和性能有着天然的敏感性，这才是作为一个技术人匠心的表现，也正是这样点点滴滴看起来不那么酷的微小工作，才强有力的支撑起了我们的整个业务。\n\n下面则是我对2019的规划:\n\n![2019年目标.png](https://upload-images.jianshu.io/upload_images/9271486-8eb16f7618a7224b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n妥实基础依然会是我下一年学习的主旋律.\n\n## 生活\n2018其实是一个很神奇的一年\n1. 真的很感谢我的女朋友的陪伴,四年不易,再过两天她就会成为我的老婆,其实我想在2019.1.1领证的,不过由于1.1民政局不上班,只能在1.2领了,开心❤️.\n2. 一直纠结的房子终于也定音了,最终还是要在无锡买房子,现在签完了合同,就等着交完首付搬新家了.对于父母的帮助,感恩却又心怀愧疚.\n\n## 总结\n在成为大牛的路上...\n\n\n","slug":"2018-12-31-新年总结","published":1,"updated":"2019-02-06T13:20:37.130Z","photos":[],"link":"","_id":"cjru5wh1q0001ucxpc2kfx6ch","content":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/181231/road.jpg\" alt=\"2018年学习的知识.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h2><p>今天已经是2018年12月31日了,回想去年的这个时候,自己已经开始实习了,果真应了那一句老话</p>\n<blockquote>\n<p>上学的时候总在憧憬工作,工作的时候又在怀念学校无忧无虑的时光</p>\n</blockquote>\n<p>但是无论如何,人都应该是向前看的.</p>\n<h2 id=\"2018学习进展\"><a href=\"#2018学习进展\" class=\"headerlink\" title=\"2018学习进展\"></a>2018学习进展</h2><p>2018年学习的东西还是挺多的:开源了自己第一个库,写完了自己第一个项目,学习了Kotlin等等,下面是我今年学习的内容<br><img src=\"https://upload-images.jianshu.io/upload_images/9271486-c5299aaef3e4d5d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2018年学习的知识.png\"></p>\n<p>学习还是比较充实的,不过还有很多内容有待改进:</p>\n<ol>\n<li>学习的Kotlin深度不够,只是停留在简单写写项目上.</li>\n<li>Leetcode原来打算每天一题,在论文答辩的那个月断掉了,后面断断续续,一年下来也就写200多道,也没有每种类型的题目做出一些总结.</li>\n<li>学习的课程有的时候过于追求速度,有些东西没有完全搞懂就直接跳过去了.而在<a href=\"https://github.com/GcsSloop/AndroidNote\" target=\"_blank\" rel=\"noopener\">自定义View教程</a>中,学习的效率则过于低下,自定义View利用每天早上的半个小时外加偶尔的晚上时间,学习了三个月,依然没有学完(主要是每个例子自己都敲一边确实占用挺多的时间)</li>\n</ol>\n<p>虽然我的学习方法有很多不足,但是也养成了许多不错的习惯,比如说我的生活习惯:</p>\n<ul>\n<li>6.30 起床</li>\n<li>6.40-7.10 看半个小时的书</li>\n<li>12.20-12.50 看关于Java的书籍</li>\n<li>18.00-23.00 没做完的工作Or慕课网的课程Or自学</li>\n<li>23.00 睡觉</li>\n</ul>\n<p>冬天之前还有每周三和周六的打球,这真的是每周最有趣的活动之一.希望自己能够继续坚持这些的良好习惯并提高学习工作效率</p>\n<h2 id=\"2019年目标\"><a href=\"#2019年目标\" class=\"headerlink\" title=\"2019年目标\"></a>2019年目标</h2><p>希望2019年更加充实,但这一切都需要建立在做好自己的本职工作的基础上,并保持一颗<code>匠心</code>,引用大佬的一句话:</p>\n<blockquote>\n<p>同时不要忘了一颗匠心，写好每一段代码，做好每一段注释，控制好每一个线程，对内存和性能有着天然的敏感性，这才是作为一个技术人匠心的表现，也正是这样点点滴滴看起来不那么酷的微小工作，才强有力的支撑起了我们的整个业务。</p>\n</blockquote>\n<p>下面则是我对2019的规划:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-8eb16f7618a7224b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2019年目标.png\"><br>妥实基础依然会是我下一年学习的主旋律.</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2018其实是一个很神奇的一年</p>\n<ol>\n<li>真的很感谢我的女朋友的陪伴,四年不易,再过两天她就会成为我的老婆,其实我想在2019.1.1领证的,不过由于1.1民政局不上班,只能在1.2领了,开心❤️.</li>\n<li>一直纠结的房子终于也定音了,最终还是要在无锡买房子,现在签完了合同,就等着交完首付搬新家了.对于父母的帮助,感恩却又心怀愧疚.</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在成为大牛的路上…</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/181231/road.jpg\" alt=\"2018年学习的知识.png\"></p>","more":"<h2 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h2><p>今天已经是2018年12月31日了,回想去年的这个时候,自己已经开始实习了,果真应了那一句老话</p>\n<blockquote>\n<p>上学的时候总在憧憬工作,工作的时候又在怀念学校无忧无虑的时光</p>\n</blockquote>\n<p>但是无论如何,人都应该是向前看的.</p>\n<h2 id=\"2018学习进展\"><a href=\"#2018学习进展\" class=\"headerlink\" title=\"2018学习进展\"></a>2018学习进展</h2><p>2018年学习的东西还是挺多的:开源了自己第一个库,写完了自己第一个项目,学习了Kotlin等等,下面是我今年学习的内容<br><img src=\"https://upload-images.jianshu.io/upload_images/9271486-c5299aaef3e4d5d8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2018年学习的知识.png\"></p>\n<p>学习还是比较充实的,不过还有很多内容有待改进:</p>\n<ol>\n<li>学习的Kotlin深度不够,只是停留在简单写写项目上.</li>\n<li>Leetcode原来打算每天一题,在论文答辩的那个月断掉了,后面断断续续,一年下来也就写200多道,也没有每种类型的题目做出一些总结.</li>\n<li>学习的课程有的时候过于追求速度,有些东西没有完全搞懂就直接跳过去了.而在<a href=\"https://github.com/GcsSloop/AndroidNote\" target=\"_blank\" rel=\"noopener\">自定义View教程</a>中,学习的效率则过于低下,自定义View利用每天早上的半个小时外加偶尔的晚上时间,学习了三个月,依然没有学完(主要是每个例子自己都敲一边确实占用挺多的时间)</li>\n</ol>\n<p>虽然我的学习方法有很多不足,但是也养成了许多不错的习惯,比如说我的生活习惯:</p>\n<ul>\n<li>6.30 起床</li>\n<li>6.40-7.10 看半个小时的书</li>\n<li>12.20-12.50 看关于Java的书籍</li>\n<li>18.00-23.00 没做完的工作Or慕课网的课程Or自学</li>\n<li>23.00 睡觉</li>\n</ul>\n<p>冬天之前还有每周三和周六的打球,这真的是每周最有趣的活动之一.希望自己能够继续坚持这些的良好习惯并提高学习工作效率</p>\n<h2 id=\"2019年目标\"><a href=\"#2019年目标\" class=\"headerlink\" title=\"2019年目标\"></a>2019年目标</h2><p>希望2019年更加充实,但这一切都需要建立在做好自己的本职工作的基础上,并保持一颗<code>匠心</code>,引用大佬的一句话:</p>\n<blockquote>\n<p>同时不要忘了一颗匠心，写好每一段代码，做好每一段注释，控制好每一个线程，对内存和性能有着天然的敏感性，这才是作为一个技术人匠心的表现，也正是这样点点滴滴看起来不那么酷的微小工作，才强有力的支撑起了我们的整个业务。</p>\n</blockquote>\n<p>下面则是我对2019的规划:</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-8eb16f7618a7224b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"2019年目标.png\"><br>妥实基础依然会是我下一年学习的主旋律.</p>\n<h2 id=\"生活\"><a href=\"#生活\" class=\"headerlink\" title=\"生活\"></a>生活</h2><p>2018其实是一个很神奇的一年</p>\n<ol>\n<li>真的很感谢我的女朋友的陪伴,四年不易,再过两天她就会成为我的老婆,其实我想在2019.1.1领证的,不过由于1.1民政局不上班,只能在1.2领了,开心❤️.</li>\n<li>一直纠结的房子终于也定音了,最终还是要在无锡买房子,现在签完了合同,就等着交完首付搬新家了.对于父母的帮助,感恩却又心怀愧疚.</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在成为大牛的路上…</p>"},{"layout":"post","title":"一文读懂Scroller","date":"2018-01-13T01:22:00.000Z","comments":1,"_content":"\n![2018年学习的知识.png](http://plew0vk60.bkt.clouddn.com//blog/190113%E5%AE%89%E5%8D%93%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg)\n\n<!-- more -->\n\n\n\n\n\n## 1.前言：\n\n如果你要在自定义View中添加滑动效果，那么使用Scroller可能是一个不错的选择，今天我们就来介绍一下Scroller。\n## 2.简单使用\n先看一下实现的效果图：\n\n![动图.gif](https://upload-images.jianshu.io/upload_images/9271486-44e74edce7f212fb.gif?imageMogr2/auto-orient/strip)\n\nScroller的使用方式很简单，在使用之前，如果对`View.scrollTo(int x, int y)`方法不了解**（这里有必要申明一下，`View.scrollTo(int x, int y)`不是静态方法，之所以加上`View.`是为了和下面`Scroller`中的方法区分下来，下面如非特殊申明，都是该类下的普通方法）**，建议先看一下[View.scrollTo(int x, int y)](https://www.jianshu.com/p/d44ec70aedb8)，如下则是我们的使用介绍：\n\n1. 先创建一个自定义View类\n2. 然后继承View\n3. 创建一个方法，调用`Scroller.startScroll(x,x,x,x);`(这边参数省略了)和重新绘制方法`View.invalidate()`\n4. 在`View.computeScroll()`不断进行判断是否完成绘制，如果没有完成，还需调用滚动方法`View.scrollTo(int x, int y)`和重新绘制方法`View.invalidate()`\n\n最后我们还是来看一下代码：\n```\npublic class ScrollerView extends View {\n    private Bitmap mBitmap;\n    private Paint mPaint;\n    private Scroller mScroller;\n\n\n    public ScrollerView(Context context) {\n        this(context,null);\n    }\n\n    public ScrollerView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n\n        init(context);\n    }\n\n    private void init(Context context) {\n        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.beauty);\n        mPaint = new Paint();\n        mScroller = new Scroller(context);\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        super.draw(canvas);\n\n        canvas.drawBitmap(mBitmap,100,100,mPaint);\n    }\n\n    public void scroll(){\n        mScroller.startScroll(0,0,0,-400,10000);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        super.computeScroll();\n\n        if(mScroller.computeScrollOffset()){\n            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());\n            // 刷新绘制的界面\n            invalidate();\n        }\n    }\n }\n```\n代码还是很简单的。\n## 3. 从过程中分析源码\n为了更直观的学习Scroller的调用流程，我用流程图展现了出来，先看图：\n![档案管理流程图.jpg](https://upload-images.jianshu.io/upload_images/9271486-924b78ce2d52485c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1. 我们首先调用`Scroller.startScroll(int startX, int startY, int dx, int dy, int duration)`方法，其实这个方法里面只是简单的传了一下值，其他什么也没有做。\n```\n      // 这里只是简单的赋值\n    public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n        mMode = SCROLL_MODE;\n        mFinished = false;\n        mDuration = duration;\n        mStartTime = AnimationUtils.currentAnimationTimeMillis();\n        mStartX = startX;\n        mStartY = startY;\n        mFinalX = startX + dx;\n        mFinalY = startY + dy;\n        mDeltaX = dx;\n        mDeltaY = dy;\n        mDurationReciprocal = 1.0f / (float) mDuration;\n    }\n```\n2. 然后我们需要手动调用`View.invalidate()`刷新我们的前面，因为我们的View不会主动刷新界面，我们都知道`View.invalidate()`会通知我们的界面进行重绘，这个时候`View. draw(Canvas canvas)`就会被调用。细心的你这个时候可能就发现了，我们的`View.computeScroll()`方法没有参与进来！别急，别急，我们来看一下缩减后的`View. draw(Canvas canvas)`的源码：\n```\n    /**\n      * This method is called by ViewGroup.drawChild() to have each child  \n      * view draw itself.\n      * This is where the View specializes rendering behavior based on layer type,\n      * and hardware acceleration.\n    */\n    boolean draw(Canvas canvas, ViewGroup parent, long drawingTime) {\n        ...\n        if (!drawingWithRenderNode) {\n            computeScroll();\n            sx = mScrollX;\n            sy = mScrollY;\n        }\n        ...\n\n        if (!drawingWithDrawingCache) {\n            if (drawingWithRenderNode) {\n                ...\n            } else {\n                // Fast path for layouts with no backgrounds\n                if ((mPrivateFlags & PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) {\n                    ...\n                } else {\n                    draw(canvas);\n                }\n            }\n        } \n        ...\n    }\n```\n其实在通知界面重绘的时候是先调用我们上面的`draw(Canvas canvas, ViewGroup parent, long drawingTime)`方法，然后在依次调用了`View.computeScroll()` 和`View. draw(Canvas canvas)`方法，而View中的`View.computeScroll()`都是空实现，所以需要我们继承的时候自己复写方法。\n3. 下面就是讲我们的重点部分了，通常我们在使用`Scroller`时，都会复写`View.computeScroll()`方法，之后我们会调用`Scroller.computeScrollOffset()`来判断滑动有没有完成，如下代码：\n```\n    @Override\n    public void computeScroll() {\n        super.computeScroll();\n        if(mScroller.computeScrollOffset()){\n            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());\n            // 刷新绘制的界面\n            invalidate();\n        }\n    }\n```\n整个`Scroller`的核心部分就是`Scroller.computeScrollOffset()`方法了，我们还是来看源码：\n```\n    public boolean computeScrollOffset() {\n        if (mFinished) {\n            return false;\n        }\n        //计算流逝的时间\n        int timePassed = (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);\n    \n        if (timePassed < mDuration) {\n            switch (mMode) {\n            case SCROLL_MODE:\n                final float x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);\n                // 重点部分 根据Interpolator插值器计算在该时间段里移动的距离加上初始赋值赋值给mCurrX和mCurrY\n                mCurrX = mStartX + Math.round(x * mDeltaX);\n                mCurrY = mStartY + Math.round(x * mDeltaY);\n                break;\n            case FLING_MODE:\n                //滑动时，抬起手执行的惯性运动，通过复杂的运算获取当前的mCurrX 、mCurrY 值。\n                final float t = (float) timePassed / mDuration;\n                final int index = (int) (NB_SAMPLES * t);\n                float distanceCoef = 1.f;\n                float velocityCoef = 0.f;\n                if (index < NB_SAMPLES) {\n                    final float t_inf = (float) index / NB_SAMPLES;\n                    final float t_sup = (float) (index + 1) / NB_SAMPLES;\n                    final float d_inf = SPLINE_POSITION[index];\n                    final float d_sup = SPLINE_POSITION[index + 1];\n                    velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);\n                    distanceCoef = d_inf + (t - t_inf) * velocityCoef;\n                }\n\n                mCurrVelocity = velocityCoef * mDistance / mDuration * 1000.0f;\n                \n                mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));\n                // Pin to mMinX <= mCurrX <= mMaxX\n                mCurrX = Math.min(mCurrX, mMaxX);\n                mCurrX = Math.max(mCurrX, mMinX);\n                \n                mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));\n                // Pin to mMinY <= mCurrY <= mMaxY\n                mCurrY = Math.min(mCurrY, mMaxY);\n                mCurrY = Math.max(mCurrY, mMinY);\n\n                if (mCurrX == mFinalX && mCurrY == mFinalY) {\n                    mFinished = true;\n                }\n\n                break;\n            }\n        }\n        else {\n            mCurrX = mFinalX;\n            mCurrY = mFinalY;\n            mFinished = true;\n        }\n        return true;\n    }\n```\n可以看到，`Scroller.computeScrollOffset()`并非简单的判断滑动是否完成，它还计算了当前应当滑动到的距离，最后在我们自定义的`View`中，通过`scrollTo(mScroller.getCurrX(),mScroller.getCurrY());`完成实现滑动过程，接着调用`View.invalidate()`重复界面刷新到绘制的过程，直到我们整个滑动过程完成。到这里，我们的整个过程就结束了。\n\n\n\n## 4. 引用\n[Scroller 解析](https://www.jianshu.com/p/01ee006c5613)\n\n<<Android开发艺术探索>>\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-01-13-一文读懂Scroller.md","raw":"---\nlayout: post\ntitle:  \"一文读懂Scroller\"\ndate: 2018-01-13 09:22\ncomments: true\ntags: \n\t- 基础\n\t- 自定义View\n---\n\n![2018年学习的知识.png](http://plew0vk60.bkt.clouddn.com//blog/190113%E5%AE%89%E5%8D%93%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg)\n\n<!-- more -->\n\n\n\n\n\n## 1.前言：\n\n如果你要在自定义View中添加滑动效果，那么使用Scroller可能是一个不错的选择，今天我们就来介绍一下Scroller。\n## 2.简单使用\n先看一下实现的效果图：\n\n![动图.gif](https://upload-images.jianshu.io/upload_images/9271486-44e74edce7f212fb.gif?imageMogr2/auto-orient/strip)\n\nScroller的使用方式很简单，在使用之前，如果对`View.scrollTo(int x, int y)`方法不了解**（这里有必要申明一下，`View.scrollTo(int x, int y)`不是静态方法，之所以加上`View.`是为了和下面`Scroller`中的方法区分下来，下面如非特殊申明，都是该类下的普通方法）**，建议先看一下[View.scrollTo(int x, int y)](https://www.jianshu.com/p/d44ec70aedb8)，如下则是我们的使用介绍：\n\n1. 先创建一个自定义View类\n2. 然后继承View\n3. 创建一个方法，调用`Scroller.startScroll(x,x,x,x);`(这边参数省略了)和重新绘制方法`View.invalidate()`\n4. 在`View.computeScroll()`不断进行判断是否完成绘制，如果没有完成，还需调用滚动方法`View.scrollTo(int x, int y)`和重新绘制方法`View.invalidate()`\n\n最后我们还是来看一下代码：\n```\npublic class ScrollerView extends View {\n    private Bitmap mBitmap;\n    private Paint mPaint;\n    private Scroller mScroller;\n\n\n    public ScrollerView(Context context) {\n        this(context,null);\n    }\n\n    public ScrollerView(Context context, @Nullable AttributeSet attrs) {\n        super(context, attrs);\n\n        init(context);\n    }\n\n    private void init(Context context) {\n        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.beauty);\n        mPaint = new Paint();\n        mScroller = new Scroller(context);\n    }\n\n    @Override\n    public void draw(Canvas canvas) {\n        super.draw(canvas);\n\n        canvas.drawBitmap(mBitmap,100,100,mPaint);\n    }\n\n    public void scroll(){\n        mScroller.startScroll(0,0,0,-400,10000);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        super.computeScroll();\n\n        if(mScroller.computeScrollOffset()){\n            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());\n            // 刷新绘制的界面\n            invalidate();\n        }\n    }\n }\n```\n代码还是很简单的。\n## 3. 从过程中分析源码\n为了更直观的学习Scroller的调用流程，我用流程图展现了出来，先看图：\n![档案管理流程图.jpg](https://upload-images.jianshu.io/upload_images/9271486-924b78ce2d52485c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n1. 我们首先调用`Scroller.startScroll(int startX, int startY, int dx, int dy, int duration)`方法，其实这个方法里面只是简单的传了一下值，其他什么也没有做。\n```\n      // 这里只是简单的赋值\n    public void startScroll(int startX, int startY, int dx, int dy, int duration) {\n        mMode = SCROLL_MODE;\n        mFinished = false;\n        mDuration = duration;\n        mStartTime = AnimationUtils.currentAnimationTimeMillis();\n        mStartX = startX;\n        mStartY = startY;\n        mFinalX = startX + dx;\n        mFinalY = startY + dy;\n        mDeltaX = dx;\n        mDeltaY = dy;\n        mDurationReciprocal = 1.0f / (float) mDuration;\n    }\n```\n2. 然后我们需要手动调用`View.invalidate()`刷新我们的前面，因为我们的View不会主动刷新界面，我们都知道`View.invalidate()`会通知我们的界面进行重绘，这个时候`View. draw(Canvas canvas)`就会被调用。细心的你这个时候可能就发现了，我们的`View.computeScroll()`方法没有参与进来！别急，别急，我们来看一下缩减后的`View. draw(Canvas canvas)`的源码：\n```\n    /**\n      * This method is called by ViewGroup.drawChild() to have each child  \n      * view draw itself.\n      * This is where the View specializes rendering behavior based on layer type,\n      * and hardware acceleration.\n    */\n    boolean draw(Canvas canvas, ViewGroup parent, long drawingTime) {\n        ...\n        if (!drawingWithRenderNode) {\n            computeScroll();\n            sx = mScrollX;\n            sy = mScrollY;\n        }\n        ...\n\n        if (!drawingWithDrawingCache) {\n            if (drawingWithRenderNode) {\n                ...\n            } else {\n                // Fast path for layouts with no backgrounds\n                if ((mPrivateFlags & PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) {\n                    ...\n                } else {\n                    draw(canvas);\n                }\n            }\n        } \n        ...\n    }\n```\n其实在通知界面重绘的时候是先调用我们上面的`draw(Canvas canvas, ViewGroup parent, long drawingTime)`方法，然后在依次调用了`View.computeScroll()` 和`View. draw(Canvas canvas)`方法，而View中的`View.computeScroll()`都是空实现，所以需要我们继承的时候自己复写方法。\n3. 下面就是讲我们的重点部分了，通常我们在使用`Scroller`时，都会复写`View.computeScroll()`方法，之后我们会调用`Scroller.computeScrollOffset()`来判断滑动有没有完成，如下代码：\n```\n    @Override\n    public void computeScroll() {\n        super.computeScroll();\n        if(mScroller.computeScrollOffset()){\n            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());\n            // 刷新绘制的界面\n            invalidate();\n        }\n    }\n```\n整个`Scroller`的核心部分就是`Scroller.computeScrollOffset()`方法了，我们还是来看源码：\n```\n    public boolean computeScrollOffset() {\n        if (mFinished) {\n            return false;\n        }\n        //计算流逝的时间\n        int timePassed = (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);\n    \n        if (timePassed < mDuration) {\n            switch (mMode) {\n            case SCROLL_MODE:\n                final float x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);\n                // 重点部分 根据Interpolator插值器计算在该时间段里移动的距离加上初始赋值赋值给mCurrX和mCurrY\n                mCurrX = mStartX + Math.round(x * mDeltaX);\n                mCurrY = mStartY + Math.round(x * mDeltaY);\n                break;\n            case FLING_MODE:\n                //滑动时，抬起手执行的惯性运动，通过复杂的运算获取当前的mCurrX 、mCurrY 值。\n                final float t = (float) timePassed / mDuration;\n                final int index = (int) (NB_SAMPLES * t);\n                float distanceCoef = 1.f;\n                float velocityCoef = 0.f;\n                if (index < NB_SAMPLES) {\n                    final float t_inf = (float) index / NB_SAMPLES;\n                    final float t_sup = (float) (index + 1) / NB_SAMPLES;\n                    final float d_inf = SPLINE_POSITION[index];\n                    final float d_sup = SPLINE_POSITION[index + 1];\n                    velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);\n                    distanceCoef = d_inf + (t - t_inf) * velocityCoef;\n                }\n\n                mCurrVelocity = velocityCoef * mDistance / mDuration * 1000.0f;\n                \n                mCurrX = mStartX + Math.round(distanceCoef * (mFinalX - mStartX));\n                // Pin to mMinX <= mCurrX <= mMaxX\n                mCurrX = Math.min(mCurrX, mMaxX);\n                mCurrX = Math.max(mCurrX, mMinX);\n                \n                mCurrY = mStartY + Math.round(distanceCoef * (mFinalY - mStartY));\n                // Pin to mMinY <= mCurrY <= mMaxY\n                mCurrY = Math.min(mCurrY, mMaxY);\n                mCurrY = Math.max(mCurrY, mMinY);\n\n                if (mCurrX == mFinalX && mCurrY == mFinalY) {\n                    mFinished = true;\n                }\n\n                break;\n            }\n        }\n        else {\n            mCurrX = mFinalX;\n            mCurrY = mFinalY;\n            mFinished = true;\n        }\n        return true;\n    }\n```\n可以看到，`Scroller.computeScrollOffset()`并非简单的判断滑动是否完成，它还计算了当前应当滑动到的距离，最后在我们自定义的`View`中，通过`scrollTo(mScroller.getCurrX(),mScroller.getCurrY());`完成实现滑动过程，接着调用`View.invalidate()`重复界面刷新到绘制的过程，直到我们整个滑动过程完成。到这里，我们的整个过程就结束了。\n\n\n\n## 4. 引用\n[Scroller 解析](https://www.jianshu.com/p/01ee006c5613)\n\n<<Android开发艺术探索>>\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-01-13-一文读懂Scroller","published":1,"updated":"2019-02-06T13:24:51.260Z","photos":[],"link":"","_id":"cjru5wh210008ucxpjdt11n99","content":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/190113%E5%AE%89%E5%8D%93%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg\" alt=\"2018年学习的知识.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"1-前言：\"><a href=\"#1-前言：\" class=\"headerlink\" title=\"1.前言：\"></a>1.前言：</h2><p>如果你要在自定义View中添加滑动效果，那么使用Scroller可能是一个不错的选择，今天我们就来介绍一下Scroller。</p>\n<h2 id=\"2-简单使用\"><a href=\"#2-简单使用\" class=\"headerlink\" title=\"2.简单使用\"></a>2.简单使用</h2><p>先看一下实现的效果图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-44e74edce7f212fb.gif?imageMogr2/auto-orient/strip\" alt=\"动图.gif\"></p>\n<p>Scroller的使用方式很简单，在使用之前，如果对<code>View.scrollTo(int x, int y)</code>方法不了解<strong>（这里有必要申明一下，<code>View.scrollTo(int x, int y)</code>不是静态方法，之所以加上<code>View.</code>是为了和下面<code>Scroller</code>中的方法区分下来，下面如非特殊申明，都是该类下的普通方法）</strong>，建议先看一下<a href=\"https://www.jianshu.com/p/d44ec70aedb8\" target=\"_blank\" rel=\"noopener\">View.scrollTo(int x, int y)</a>，如下则是我们的使用介绍：</p>\n<ol>\n<li>先创建一个自定义View类</li>\n<li>然后继承View</li>\n<li>创建一个方法，调用<code>Scroller.startScroll(x,x,x,x);</code>(这边参数省略了)和重新绘制方法<code>View.invalidate()</code></li>\n<li>在<code>View.computeScroll()</code>不断进行判断是否完成绘制，如果没有完成，还需调用滚动方法<code>View.scrollTo(int x, int y)</code>和重新绘制方法<code>View.invalidate()</code></li>\n</ol>\n<p>最后我们还是来看一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bitmap mBitmap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerView</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.beauty);</span><br><span class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.draw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.drawBitmap(mBitmap,<span class=\"number\">100</span>,<span class=\"number\">100</span>,mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scroll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,-<span class=\"number\">400</span>,<span class=\"number\">10000</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">            <span class=\"comment\">// 刷新绘制的界面</span></span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码还是很简单的。</p>\n<h2 id=\"3-从过程中分析源码\"><a href=\"#3-从过程中分析源码\" class=\"headerlink\" title=\"3. 从过程中分析源码\"></a>3. 从过程中分析源码</h2><p>为了更直观的学习Scroller的调用流程，我用流程图展现了出来，先看图：<br><img src=\"https://upload-images.jianshu.io/upload_images/9271486-924b78ce2d52485c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"档案管理流程图.jpg\"></p>\n<ol>\n<li><p>我们首先调用<code>Scroller.startScroll(int startX, int startY, int dx, int dy, int duration)</code>方法，其实这个方法里面只是简单的传了一下值，其他什么也没有做。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // 这里只是简单的赋值</span><br><span class=\"line\"><span class=\"meta\">public</span> void startScroll(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> <span class=\"built_in\">dx</span>, <span class=\"keyword\">int</span> <span class=\"built_in\">dy</span>, <span class=\"keyword\">int</span> duration) &#123;</span><br><span class=\"line\">    mMode = SCROLL_MODE<span class=\"comment\">;</span></span><br><span class=\"line\">    mFinished = false<span class=\"comment\">;</span></span><br><span class=\"line\">    mDuration = duration<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartTime = AnimationUtils.currentAnimationTimeMillis()<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartX = startX<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartY = startY<span class=\"comment\">;</span></span><br><span class=\"line\">    mFinalX = startX + <span class=\"built_in\">dx</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mFinalY = startY + <span class=\"built_in\">dy</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDeltaX = <span class=\"built_in\">dx</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDeltaY = <span class=\"built_in\">dy</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDurationReciprocal = <span class=\"number\">1.</span>0f / (<span class=\"meta\">float</span>) mDuration<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后我们需要手动调用<code>View.invalidate()</code>刷新我们的前面，因为我们的View不会主动刷新界面，我们都知道<code>View.invalidate()</code>会通知我们的界面进行重绘，这个时候<code>View. draw(Canvas canvas)</code>就会被调用。细心的你这个时候可能就发现了，我们的<code>View.computeScroll()</code>方法没有参与进来！别急，别急，我们来看一下缩减后的<code>View. draw(Canvas canvas)</code>的源码：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * This method is called by ViewGroup.drawChild() to have each child  </span></span><br><span class=\"line\"><span class=\"comment\">  * view draw itself.</span></span><br><span class=\"line\"><span class=\"comment\">  * This is where the View specializes rendering behavior based on layer type,</span></span><br><span class=\"line\"><span class=\"comment\">  * and hardware acceleration.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">boolean</span> draw(Canvas canvas, ViewGroup <span class=\"keyword\">parent</span>, long drawingTime) &#123;</span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!drawingWithRenderNode) &#123;</span><br><span class=\"line\">        computeScroll();</span><br><span class=\"line\">        sx = mScrollX;</span><br><span class=\"line\">        sy = mScrollY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawingWithRenderNode) &#123;</span><br><span class=\"line\">            <span class=\"params\">...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fast path for layouts with no backgrounds</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class=\"line\">                <span class=\"params\">...</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                draw(canvas);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其实在通知界面重绘的时候是先调用我们上面的<code>draw(Canvas canvas, ViewGroup parent, long drawingTime)</code>方法，然后在依次调用了<code>View.computeScroll()</code> 和<code>View. draw(Canvas canvas)</code>方法，而View中的<code>View.computeScroll()</code>都是空实现，所以需要我们继承的时候自己复写方法。</p>\n<ol>\n<li>下面就是讲我们的重点部分了，通常我们在使用<code>Scroller</code>时，都会复写<code>View.computeScroll()</code>方法，之后我们会调用<code>Scroller.computeScrollOffset()</code>来判断滑动有没有完成，如下代码：<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.computeScroll();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">        scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">        <span class=\"comment\">// 刷新绘制的界面</span></span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>整个<code>Scroller</code>的核心部分就是<code>Scroller.computeScrollOffset()</code>方法了，我们还是来看源码：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> computeScrollOffset() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFinished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算流逝的时间</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> timePassed = (<span class=\"built_in\">int</span>)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timePassed &lt; mDuration) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SCROLL_MODE:</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);</span><br><span class=\"line\">            <span class=\"comment\">// 重点部分 根据Interpolator插值器计算在该时间段里移动的距离加上初始赋值赋值给mCurrX和mCurrY</span></span><br><span class=\"line\">            mCurrX = mStartX + Math.<span class=\"built_in\">round</span>(x * mDeltaX);</span><br><span class=\"line\">            mCurrY = mStartY + Math.<span class=\"built_in\">round</span>(x * mDeltaY);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FLING_MODE:</span><br><span class=\"line\">            <span class=\"comment\">//滑动时，抬起手执行的惯性运动，通过复杂的运算获取当前的mCurrX 、mCurrY 值。</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t = (<span class=\"built_in\">float</span>) timePassed / mDuration;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> index = (<span class=\"built_in\">int</span>) (NB_SAMPLES * t);</span><br><span class=\"line\">            <span class=\"built_in\">float</span> distanceCoef = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">            <span class=\"built_in\">float</span> velocityCoef = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; NB_SAMPLES) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t_inf = (<span class=\"built_in\">float</span>) index / NB_SAMPLES;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t_sup = (<span class=\"built_in\">float</span>) (index + <span class=\"number\">1</span>) / NB_SAMPLES;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> d_inf = SPLINE_POSITION[index];</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> d_sup = SPLINE_POSITION[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">                velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);</span><br><span class=\"line\">                distanceCoef = d_inf + (t - t_inf) * velocityCoef;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mCurrVelocity = velocityCoef * mDistance / mDuration * <span class=\"number\">1000.0</span>f;</span><br><span class=\"line\">            </span><br><span class=\"line\">            mCurrX = mStartX + Math.<span class=\"built_in\">round</span>(distanceCoef * (mFinalX - mStartX));</span><br><span class=\"line\">            <span class=\"comment\">// Pin to mMinX &lt;= mCurrX &lt;= mMaxX</span></span><br><span class=\"line\">            mCurrX = Math.<span class=\"built_in\">min</span>(mCurrX, mMaxX);</span><br><span class=\"line\">            mCurrX = Math.<span class=\"built_in\">max</span>(mCurrX, mMinX);</span><br><span class=\"line\">            </span><br><span class=\"line\">            mCurrY = mStartY + Math.<span class=\"built_in\">round</span>(distanceCoef * (mFinalY - mStartY));</span><br><span class=\"line\">            <span class=\"comment\">// Pin to mMinY &lt;= mCurrY &lt;= mMaxY</span></span><br><span class=\"line\">            mCurrY = Math.<span class=\"built_in\">min</span>(mCurrY, mMaxY);</span><br><span class=\"line\">            mCurrY = Math.<span class=\"built_in\">max</span>(mCurrY, mMinY);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mCurrX == mFinalX &amp;&amp; mCurrY == mFinalY) &#123;</span><br><span class=\"line\">                mFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mCurrX = mFinalX;</span><br><span class=\"line\">        mCurrY = mFinalY;</span><br><span class=\"line\">        mFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，<code>Scroller.computeScrollOffset()</code>并非简单的判断滑动是否完成，它还计算了当前应当滑动到的距离，最后在我们自定义的<code>View</code>中，通过<code>scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</code>完成实现滑动过程，接着调用<code>View.invalidate()</code>重复界面刷新到绘制的过程，直到我们整个滑动过程完成。到这里，我们的整个过程就结束了。</p>\n<h2 id=\"4-引用\"><a href=\"#4-引用\" class=\"headerlink\" title=\"4. 引用\"></a>4. 引用</h2><p><a href=\"https://www.jianshu.com/p/01ee006c5613\" target=\"_blank\" rel=\"noopener\">Scroller 解析</a></p>\n<p>&lt;<android开发艺术探索>&gt;</android开发艺术探索></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/190113%E5%AE%89%E5%8D%93%E6%9C%BA%E5%99%A8%E4%BA%BA.jpg\" alt=\"2018年学习的知识.png\"></p>","more":"<h2 id=\"1-前言：\"><a href=\"#1-前言：\" class=\"headerlink\" title=\"1.前言：\"></a>1.前言：</h2><p>如果你要在自定义View中添加滑动效果，那么使用Scroller可能是一个不错的选择，今天我们就来介绍一下Scroller。</p>\n<h2 id=\"2-简单使用\"><a href=\"#2-简单使用\" class=\"headerlink\" title=\"2.简单使用\"></a>2.简单使用</h2><p>先看一下实现的效果图：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-44e74edce7f212fb.gif?imageMogr2/auto-orient/strip\" alt=\"动图.gif\"></p>\n<p>Scroller的使用方式很简单，在使用之前，如果对<code>View.scrollTo(int x, int y)</code>方法不了解<strong>（这里有必要申明一下，<code>View.scrollTo(int x, int y)</code>不是静态方法，之所以加上<code>View.</code>是为了和下面<code>Scroller</code>中的方法区分下来，下面如非特殊申明，都是该类下的普通方法）</strong>，建议先看一下<a href=\"https://www.jianshu.com/p/d44ec70aedb8\" target=\"_blank\" rel=\"noopener\">View.scrollTo(int x, int y)</a>，如下则是我们的使用介绍：</p>\n<ol>\n<li>先创建一个自定义View类</li>\n<li>然后继承View</li>\n<li>创建一个方法，调用<code>Scroller.startScroll(x,x,x,x);</code>(这边参数省略了)和重新绘制方法<code>View.invalidate()</code></li>\n<li>在<code>View.computeScroll()</code>不断进行判断是否完成绘制，如果没有完成，还需调用滚动方法<code>View.scrollTo(int x, int y)</code>和重新绘制方法<code>View.invalidate()</code></li>\n</ol>\n<p>最后我们还是来看一下代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollerView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Bitmap mBitmap;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollerView</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\"></span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.beauty);</span><br><span class=\"line\">        mPaint = <span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">draw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.draw(canvas);</span><br><span class=\"line\"></span><br><span class=\"line\">        canvas.drawBitmap(mBitmap,<span class=\"number\">100</span>,<span class=\"number\">100</span>,mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">scroll</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,-<span class=\"number\">400</span>,<span class=\"number\">10000</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.computeScroll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">            <span class=\"comment\">// 刷新绘制的界面</span></span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>代码还是很简单的。</p>\n<h2 id=\"3-从过程中分析源码\"><a href=\"#3-从过程中分析源码\" class=\"headerlink\" title=\"3. 从过程中分析源码\"></a>3. 从过程中分析源码</h2><p>为了更直观的学习Scroller的调用流程，我用流程图展现了出来，先看图：<br><img src=\"https://upload-images.jianshu.io/upload_images/9271486-924b78ce2d52485c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"档案管理流程图.jpg\"></p>\n<ol>\n<li><p>我们首先调用<code>Scroller.startScroll(int startX, int startY, int dx, int dy, int duration)</code>方法，其实这个方法里面只是简单的传了一下值，其他什么也没有做。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  // 这里只是简单的赋值</span><br><span class=\"line\"><span class=\"meta\">public</span> void startScroll(<span class=\"keyword\">int</span> startX, <span class=\"keyword\">int</span> startY, <span class=\"keyword\">int</span> <span class=\"built_in\">dx</span>, <span class=\"keyword\">int</span> <span class=\"built_in\">dy</span>, <span class=\"keyword\">int</span> duration) &#123;</span><br><span class=\"line\">    mMode = SCROLL_MODE<span class=\"comment\">;</span></span><br><span class=\"line\">    mFinished = false<span class=\"comment\">;</span></span><br><span class=\"line\">    mDuration = duration<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartTime = AnimationUtils.currentAnimationTimeMillis()<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartX = startX<span class=\"comment\">;</span></span><br><span class=\"line\">    mStartY = startY<span class=\"comment\">;</span></span><br><span class=\"line\">    mFinalX = startX + <span class=\"built_in\">dx</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mFinalY = startY + <span class=\"built_in\">dy</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDeltaX = <span class=\"built_in\">dx</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDeltaY = <span class=\"built_in\">dy</span><span class=\"comment\">;</span></span><br><span class=\"line\">    mDurationReciprocal = <span class=\"number\">1.</span>0f / (<span class=\"meta\">float</span>) mDuration<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后我们需要手动调用<code>View.invalidate()</code>刷新我们的前面，因为我们的View不会主动刷新界面，我们都知道<code>View.invalidate()</code>会通知我们的界面进行重绘，这个时候<code>View. draw(Canvas canvas)</code>就会被调用。细心的你这个时候可能就发现了，我们的<code>View.computeScroll()</code>方法没有参与进来！别急，别急，我们来看一下缩减后的<code>View. draw(Canvas canvas)</code>的源码：</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * This method is called by ViewGroup.drawChild() to have each child  </span></span><br><span class=\"line\"><span class=\"comment\">  * view draw itself.</span></span><br><span class=\"line\"><span class=\"comment\">  * This is where the View specializes rendering behavior based on layer type,</span></span><br><span class=\"line\"><span class=\"comment\">  * and hardware acceleration.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"built_in\">boolean</span> draw(Canvas canvas, ViewGroup <span class=\"keyword\">parent</span>, long drawingTime) &#123;</span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!drawingWithRenderNode) &#123;</span><br><span class=\"line\">        computeScroll();</span><br><span class=\"line\">        sx = mScrollX;</span><br><span class=\"line\">        sy = mScrollY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!drawingWithDrawingCache) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawingWithRenderNode) &#123;</span><br><span class=\"line\">            <span class=\"params\">...</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Fast path for layouts with no backgrounds</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_SKIP_DRAW) == PFLAG_SKIP_DRAW) &#123;</span><br><span class=\"line\">                <span class=\"params\">...</span></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                draw(canvas);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"params\">...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其实在通知界面重绘的时候是先调用我们上面的<code>draw(Canvas canvas, ViewGroup parent, long drawingTime)</code>方法，然后在依次调用了<code>View.computeScroll()</code> 和<code>View. draw(Canvas canvas)</code>方法，而View中的<code>View.computeScroll()</code>都是空实现，所以需要我们继承的时候自己复写方法。</p>\n<ol>\n<li>下面就是讲我们的重点部分了，通常我们在使用<code>Scroller</code>时，都会复写<code>View.computeScroll()</code>方法，之后我们会调用<code>Scroller.computeScrollOffset()</code>来判断滑动有没有完成，如下代码：<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.computeScroll();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mScroller.computeScrollOffset())&#123;</span><br><span class=\"line\">        scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</span><br><span class=\"line\">        <span class=\"comment\">// 刷新绘制的界面</span></span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>整个<code>Scroller</code>的核心部分就是<code>Scroller.computeScrollOffset()</code>方法了，我们还是来看源码：<br><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"built_in\">boolean</span> computeScrollOffset() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mFinished) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//计算流逝的时间</span></span><br><span class=\"line\">    <span class=\"built_in\">int</span> timePassed = (<span class=\"built_in\">int</span>)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (timePassed &lt; mDuration) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (mMode) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> SCROLL_MODE:</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> x = mInterpolator.getInterpolation(timePassed * mDurationReciprocal);</span><br><span class=\"line\">            <span class=\"comment\">// 重点部分 根据Interpolator插值器计算在该时间段里移动的距离加上初始赋值赋值给mCurrX和mCurrY</span></span><br><span class=\"line\">            mCurrX = mStartX + Math.<span class=\"built_in\">round</span>(x * mDeltaX);</span><br><span class=\"line\">            mCurrY = mStartY + Math.<span class=\"built_in\">round</span>(x * mDeltaY);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> FLING_MODE:</span><br><span class=\"line\">            <span class=\"comment\">//滑动时，抬起手执行的惯性运动，通过复杂的运算获取当前的mCurrX 、mCurrY 值。</span></span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t = (<span class=\"built_in\">float</span>) timePassed / mDuration;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> index = (<span class=\"built_in\">int</span>) (NB_SAMPLES * t);</span><br><span class=\"line\">            <span class=\"built_in\">float</span> distanceCoef = <span class=\"number\">1.</span>f;</span><br><span class=\"line\">            <span class=\"built_in\">float</span> velocityCoef = <span class=\"number\">0.</span>f;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index &lt; NB_SAMPLES) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t_inf = (<span class=\"built_in\">float</span>) index / NB_SAMPLES;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> t_sup = (<span class=\"built_in\">float</span>) (index + <span class=\"number\">1</span>) / NB_SAMPLES;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> d_inf = SPLINE_POSITION[index];</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> d_sup = SPLINE_POSITION[index + <span class=\"number\">1</span>];</span><br><span class=\"line\">                velocityCoef = (d_sup - d_inf) / (t_sup - t_inf);</span><br><span class=\"line\">                distanceCoef = d_inf + (t - t_inf) * velocityCoef;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mCurrVelocity = velocityCoef * mDistance / mDuration * <span class=\"number\">1000.0</span>f;</span><br><span class=\"line\">            </span><br><span class=\"line\">            mCurrX = mStartX + Math.<span class=\"built_in\">round</span>(distanceCoef * (mFinalX - mStartX));</span><br><span class=\"line\">            <span class=\"comment\">// Pin to mMinX &lt;= mCurrX &lt;= mMaxX</span></span><br><span class=\"line\">            mCurrX = Math.<span class=\"built_in\">min</span>(mCurrX, mMaxX);</span><br><span class=\"line\">            mCurrX = Math.<span class=\"built_in\">max</span>(mCurrX, mMinX);</span><br><span class=\"line\">            </span><br><span class=\"line\">            mCurrY = mStartY + Math.<span class=\"built_in\">round</span>(distanceCoef * (mFinalY - mStartY));</span><br><span class=\"line\">            <span class=\"comment\">// Pin to mMinY &lt;= mCurrY &lt;= mMaxY</span></span><br><span class=\"line\">            mCurrY = Math.<span class=\"built_in\">min</span>(mCurrY, mMaxY);</span><br><span class=\"line\">            mCurrY = Math.<span class=\"built_in\">max</span>(mCurrY, mMinY);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mCurrX == mFinalX &amp;&amp; mCurrY == mFinalY) &#123;</span><br><span class=\"line\">                mFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        mCurrX = mFinalX;</span><br><span class=\"line\">        mCurrY = mFinalY;</span><br><span class=\"line\">        mFinished = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到，<code>Scroller.computeScrollOffset()</code>并非简单的判断滑动是否完成，它还计算了当前应当滑动到的距离，最后在我们自定义的<code>View</code>中，通过<code>scrollTo(mScroller.getCurrX(),mScroller.getCurrY());</code>完成实现滑动过程，接着调用<code>View.invalidate()</code>重复界面刷新到绘制的过程，直到我们整个滑动过程完成。到这里，我们的整个过程就结束了。</p>\n<h2 id=\"4-引用\"><a href=\"#4-引用\" class=\"headerlink\" title=\"4. 引用\"></a>4. 引用</h2><p><a href=\"https://www.jianshu.com/p/01ee006c5613\" target=\"_blank\" rel=\"noopener\">Scroller 解析</a></p>\n<p>&lt;<android开发艺术探索>&gt;</android开发艺术探索></p>"},{"layout":"post","title":"仿掌阅实现书籍打开动画","date":"2019-01-20T00:52:00.000Z","comments":0,"_content":"\n![安卓机器人.png](http://plew0vk60.bkt.clouddn.com//blog/190120/high-definition-wallpapers-for-android.jpg)\n\n<!-- more -->\n\n\n\n\n\n## 一. 前言\n上次打开掌阅的时候看到书籍打开动画的效果还不错，正好最近也在做阅读器的项目，所以想在项目中实现一下。\n## 二. 思路\n讲思路之前，先看一下实现效果吧：\n\n![书籍打开关闭动画.gif](https://upload-images.jianshu.io/upload_images/9271486-ae84076770395175.gif?imageMogr2/auto-orient/strip)\n\n看完实现效果，我们再来讲一下实现思路：![书籍打开动画的思路.png](https://upload-images.jianshu.io/upload_images/9271486-e06ee7f20473b793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n1. 获取`RecyclerView`（或`GridView`）中的`子View里面的ImageView`在屏幕的位置，因为获取的是Window下的位置，所以Y轴位置取出来还要减去`状态栏的高度`。\n2. 图书的封面和内容页（其实是两个`ImageView`）设置成刚刚取出的`子View里面的ImageView`的位置和大小。\n3. 设置动画，这边缩放动画的轴心点的计算方式需要注意一下，等下文讲解代码的时候再具体解释，还有就是利用`Camera`类（非平常的相机类）实现的打开和关闭动画（如果你对Camera不熟悉，建议先看GcsSloop大佬的这篇[Matrix Camera](https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md)）。\n## 三. 具体实现\n我会在这个过程中一步一步教你如何实现这个效果：\n**1. 布局**\n`activity_open_book.xml`:\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.activity.OpenBookActivity\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recycle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n    <ImageView\n        android:id=\"@+id/img_content\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:visibility=\"gone\"\n        android:contentDescription=\"@string/app_name\" />\n\n    <ImageView\n        android:id=\"@+id/img_first\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:scaleType=\"centerCrop\"\n        android:visibility=\"gone\"\n        android:contentDescription=\"@string/app_name\" />\n\n</RelativeLayout>\n```\n`recycler_item_book.xml:`\n`RecylerVIew`中的子布局，其实也就是`ImageView`和`TextView`，这里就不贴放了。\n\n**2. 动画**\n 我们只讲解旋转动画，因为旋转动画中也会涉及缩放动画。想一下，如果想要在界面中实现缩放动画，我们得找好轴心点，那么，轴心点的x，y坐标如何计算呢？为了更好的求出坐标，我们先来看一张图：![缩放讲解图.png](https://upload-images.jianshu.io/upload_images/9271486-5cd93e6016701955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我们可以得出这样的公式：`x / pl = vr / pr`，而对于`pl`、`vr`和`pr`，则有`pl = ml + x`，`vr = w - x`和`pr = pw -pl`，综合以上的公式，最终我们可以得出的`x = ml * pw / (pw - w)`，y的坐标可以用同样的方式求得。下面我们来看代码：\n\n```\npublic class Rotate3DAnimation extends Animation {\n    private static final String TAG = \"Rotate3DAnimation\";\n\n    private final float mFromDegrees;\n    private final float mToDegrees;\n    private final float mMarginLeft;\n    private final float mMarginTop;\n    // private final float mDepthZ;\n    private final float mAnimationScale;\n    private boolean reverse;\n    private Camera mCamera;\n\n    // 旋转中心\n    private float mPivotX;\n    private float mPivotY;\n\n    private float scale = 1;    // <------- 像素密度\n\n    public Rotate3DAnimation(Context context, float mFromDegrees, float mToDegrees, float mMarginLeft, float mMarginTop,\n                             float animationScale, boolean reverse) {\n        this.mFromDegrees = mFromDegrees;\n        this.mToDegrees = mToDegrees;\n        this.mMarginLeft = mMarginLeft;\n        this.mMarginTop = mMarginTop;\n        this.mAnimationScale = animationScale;\n        this.reverse = reverse;\n\n        // 获取手机像素密度 （即dp与px的比例）\n        scale = context.getResources().getDisplayMetrics().density;\n    }\n\n    @Override\n    public void initialize(int width, int height, int parentWidth, int parentHeight) {\n        super.initialize(width, height, parentWidth, parentHeight);\n\n        mCamera = new Camera();\n        mPivotX = calculatePivotX(mMarginLeft, parentWidth, width);\n        mPivotY = calculatePivotY(mMarginTop, parentHeight, height);\n        Log.i(TAG,\"width:\"+width+\",height:\"+height+\",pw:\"+parentWidth+\",ph:\"+parentHeight);\n        Log.i(TAG,\"中心点x:\"+mPivotX+\",中心点y:\"+mPivotY);\n    }\n\n    @Override\n    protected void applyTransformation(float interpolatedTime, Transformation t) {\n        super.applyTransformation(interpolatedTime, t);\n\n        float degrees = reverse ? mToDegrees + (mFromDegrees - mToDegrees) * interpolatedTime : mFromDegrees + (mToDegrees - mFromDegrees) * interpolatedTime;\n        Matrix matrix = t.getMatrix();\n\n        Camera camera = mCamera;\n        camera.save();\n        camera.rotateY(degrees);\n        camera.getMatrix(matrix);\n        camera.restore();\n\n        // 修正失真，主要修改 MPERSP_0 和 MPERSP_1\n        float[] mValues = new float[9];\n        matrix.getValues(mValues);                //获取数值\n        mValues[6] = mValues[6] / scale;            //数值修正\n        mValues[7] = mValues[7] / scale;            //数值修正\n        matrix.setValues(mValues);                //重新赋值\n\n        if (reverse) {\n            matrix.postScale(1 + (mAnimationScale - 1) * interpolatedTime, 1 + (mAnimationScale - 1) * interpolatedTime,\n                    mPivotX - mMarginLeft, mPivotY - mMarginTop);\n        } else {\n            matrix.postScale(1 + (mAnimationScale - 1) * (1 - interpolatedTime), 1 + (mAnimationScale - 1) * (1 - interpolatedTime),\n                    mPivotX - mMarginLeft, mPivotY - mMarginTop);\n        }\n    }\n\n    /**\n     * 计算缩放的中心点的横坐标\n     *\n     * @param marginLeft  该View距离父布局左边的距离\n     * @param parentWidth 父布局的宽度\n     * @param width       View的宽度\n     * @return 缩放中心点的横坐标\n     */\n    public float calculatePivotX(float marginLeft, float parentWidth, float width) {\n        return parentWidth * marginLeft / (parentWidth - width);\n    }\n\n\n    /**\n     * 计算缩放的中心点的纵坐标\n     *\n     * @param marginTop    该View顶部距离父布局顶部的距离\n     * @param parentHeight 父布局的高度\n     * @param height       子布局的高度\n     * @return 缩放的中心点的纵坐标\n     */\n    public float calculatePivotY(float marginTop, float parentHeight, float height) {\n        return parentHeight * marginTop / (parentHeight - height);\n    }\n\n    public void reverse() {\n        reverse = !reverse;\n    }\n}\n```\n计算缩放点我们在上面已经讨论过，这里我们就只看函数`applyTransformation(float interpolatedTime, Transformation t)`，我们先判断我们当前是打开书还是合上书的状态（这两个状态使得动画正好相反），计算好当前旋转度数再取得Camera，利用`camera.rotateY(degrees)`实现书本围绕Y轴旋转，之后拿到我们的矩阵，围绕计算出的中心点进行缩放。\n**3. 使用**\n 这一步我们需要将动画运用到我们的界面上去，当点击我们的RecyclerView的时候，我们需要取出RecyclerView中的`子View中的ImageView`，在适配器中利用监听器传出：\n```\npublic interface OnBookClickListener{\n    void onItemClick(int pos,View view);\n}\n```\n接着，我们在`OpenBookActivity`中实现`OnBookClickListener`接口，省略了一些代码：\n```\npublic class OpenBookActivity extends AppCompatActivity implements Animation.AnimationListener,BookAdapter.OnBookClickListener {\n    private static final String TAG = \"OpenBookActivity\";\n\n    //  一系列变量 此处省略\n    ... \n    // 记录View的位置\n    private int[] location = new int[2];\n    // 内容页\n    private ImageView mContent;\n    // 封面\n    private ImageView mFirst;\n    // 缩放动画\n    private ContentScaleAnimation scaleAnimation;\n    // 3D旋转动画\n    private Rotate3DAnimation threeDAnimation;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_book);\n\n        initWidget();\n    }\n\n    private void initWidget() {\n        ...\n\n        // 获取状态栏高度\n        statusHeight = -1;\n        //获取status_bar_height资源的ID\n        int resourceId = getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n        if (resourceId > 0) {\n            //根据资源ID获取响应的尺寸值\n            statusHeight = getResources().getDimensionPixelSize(resourceId);\n        }\n\n        initData();\n        ...\n    }\n\n    // 重复添加数据\n    private void initData() {\n        for(int i = 0;i<10;i++){\n            values.add(R.drawable.preview);\n        }\n    }\n\n    @Override\n    protected void onRestart() {\n        super.onRestart();\n\n        // 当界面重新进入的时候进行合书的动画\n        if(isOpenBook) {\n            scaleAnimation.reverse();\n            threeDAnimation.reverse();\n            mFirst.clearAnimation();\n            mFirst.startAnimation(threeDAnimation);\n            mContent.clearAnimation();\n            mContent.startAnimation(scaleAnimation);\n        }\n    }\n\n    @Override\n    public void onAnimationEnd(Animation animation) {\n        if(scaleAnimation.hasEnded() && threeDAnimation.hasEnded()) {\n            // 两个动画都结束的时候再处理后续操作\n            if (!isOpenBook) {\n                isOpenBook = true;\n                BookSampleActivity.show(this);\n            } else {\n                isOpenBook = false;\n                mFirst.clearAnimation();\n                mContent.clearAnimation();\n                mFirst.setVisibility(View.GONE);\n                mContent.setVisibility(View.GONE);\n            }\n        }\n    }\n\n    @Override\n    public void onItemClick(int pos,View view) {\n        mFirst.setVisibility(View.VISIBLE);\n        mContent.setVisibility(View.VISIBLE);\n\n        // 计算当前的位置坐标\n        view.getLocationInWindow(location);\n        int width = view.getWidth();\n        int height = view.getHeight();\n\n        // 两个ImageView设置大小和位置\n        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mFirst.getLayoutParams();\n        params.leftMargin = location[0];\n        params.topMargin = location[1] - statusHeight;\n        params.width = width;\n        params.height = height;\n        mFirst.setLayoutParams(params);\n        mContent.setLayoutParams(params);\n        //  设置内容\n        Bitmap contentBitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);\n        contentBitmap.eraseColor(getResources().getColor(R.color.read_theme_yellow));\n        mContent.setImageBitmap(contentBitmap);\n        // 设置封面\n        Bitmap coverBitmap = BitmapFactory.decodeResource(getResources(),values.get(pos));\n        mFirst.setImageBitmap(coverBitmap);\n        // 设置封面\n        initAnimation(view);\n        Log.i(TAG,\"left:\"+mFirst.getLeft()+\"top:\"+mFirst.getTop());\n\n        mContent.clearAnimation();\n        mContent.startAnimation(scaleAnimation);\n        mFirst.clearAnimation();\n        mFirst.startAnimation(threeDAnimation);\n    }\n\n    // 初始化动画\n    private void initAnimation(View view) {\n        float viewWidth = view.getWidth();\n        float viewHeight = view.getHeight();\n\n        DisplayMetrics displayMetrics = new DisplayMetrics();\n        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n        float maxWidth = displayMetrics.widthPixels;\n        float maxHeight = displayMetrics.heightPixels;\n        float horScale = maxWidth / viewWidth;\n        float verScale = maxHeight / viewHeight;\n        float scale = horScale > verScale ? horScale : verScale;\n\n        scaleAnimation = new ContentScaleAnimation(location[0], location[1], scale, false);\n        scaleAnimation.setInterpolator(new DecelerateInterpolator());  //设置插值器\n        scaleAnimation.setDuration(1000);\n        scaleAnimation.setFillAfter(true);  //动画停留在最后一帧\n        scaleAnimation.setAnimationListener(OpenBookActivity.this);\n\n        threeDAnimation = new Rotate3DAnimation(OpenBookActivity.this, -180, 0\n                , location[0], location[1], scale, true);\n        threeDAnimation.setDuration(1000);                         //设置动画时长\n        threeDAnimation.setFillAfter(true);                        //保持旋转后效果\n        threeDAnimation.setInterpolator(new DecelerateInterpolator());\n    }\n}\n```\n第一个重点是复写的`OnBookClickListener`中的`onItemClick`方法，在该方法中：\n- 我们根据取得的`view`(实际上是子View中的ImageView)，计算出当前界面的两个ImageView的位置和大小。\n- 计算缩放参数和播放动画的顺序，展开动画，和处理动画结束后的事件。\n\n第二个重点是中心回到当前界面的时候，合上书的动画，就是刚刚的动画倒过来执行，在`onRestart() `方法中执行，执行完成之后隐藏两个`ImageVIew`。\n## 四. 总结\n总的来说就是`Camera`和`Animation`的简单使用，本人水平有限，难免不足，欢迎提出。\n项目地址：[Test](https://github.com/mCyp/Test)\nOver~\n\n引用：\n[Matrix Camera](https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md)\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/2019-01-20-仿掌阅实现书籍打开动画.md","raw":"---\nlayout: post\ntitle: \"仿掌阅实现书籍打开动画\"\ndate: 2019-01-20 08:52\ncomments: false\ntags: \n\t- Android \n\t- 动画\n---\n\n![安卓机器人.png](http://plew0vk60.bkt.clouddn.com//blog/190120/high-definition-wallpapers-for-android.jpg)\n\n<!-- more -->\n\n\n\n\n\n## 一. 前言\n上次打开掌阅的时候看到书籍打开动画的效果还不错，正好最近也在做阅读器的项目，所以想在项目中实现一下。\n## 二. 思路\n讲思路之前，先看一下实现效果吧：\n\n![书籍打开关闭动画.gif](https://upload-images.jianshu.io/upload_images/9271486-ae84076770395175.gif?imageMogr2/auto-orient/strip)\n\n看完实现效果，我们再来讲一下实现思路：![书籍打开动画的思路.png](https://upload-images.jianshu.io/upload_images/9271486-e06ee7f20473b793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n1. 获取`RecyclerView`（或`GridView`）中的`子View里面的ImageView`在屏幕的位置，因为获取的是Window下的位置，所以Y轴位置取出来还要减去`状态栏的高度`。\n2. 图书的封面和内容页（其实是两个`ImageView`）设置成刚刚取出的`子View里面的ImageView`的位置和大小。\n3. 设置动画，这边缩放动画的轴心点的计算方式需要注意一下，等下文讲解代码的时候再具体解释，还有就是利用`Camera`类（非平常的相机类）实现的打开和关闭动画（如果你对Camera不熟悉，建议先看GcsSloop大佬的这篇[Matrix Camera](https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md)）。\n## 三. 具体实现\n我会在这个过程中一步一步教你如何实现这个效果：\n**1. 布局**\n`activity_open_book.xml`:\n```\n<RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".ui.activity.OpenBookActivity\">\n\n    <android.support.v7.widget.RecyclerView\n        android:id=\"@+id/recycle\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"/>\n\n    <ImageView\n        android:id=\"@+id/img_content\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:visibility=\"gone\"\n        android:contentDescription=\"@string/app_name\" />\n\n    <ImageView\n        android:id=\"@+id/img_first\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:scaleType=\"centerCrop\"\n        android:visibility=\"gone\"\n        android:contentDescription=\"@string/app_name\" />\n\n</RelativeLayout>\n```\n`recycler_item_book.xml:`\n`RecylerVIew`中的子布局，其实也就是`ImageView`和`TextView`，这里就不贴放了。\n\n**2. 动画**\n 我们只讲解旋转动画，因为旋转动画中也会涉及缩放动画。想一下，如果想要在界面中实现缩放动画，我们得找好轴心点，那么，轴心点的x，y坐标如何计算呢？为了更好的求出坐标，我们先来看一张图：![缩放讲解图.png](https://upload-images.jianshu.io/upload_images/9271486-5cd93e6016701955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n我们可以得出这样的公式：`x / pl = vr / pr`，而对于`pl`、`vr`和`pr`，则有`pl = ml + x`，`vr = w - x`和`pr = pw -pl`，综合以上的公式，最终我们可以得出的`x = ml * pw / (pw - w)`，y的坐标可以用同样的方式求得。下面我们来看代码：\n\n```\npublic class Rotate3DAnimation extends Animation {\n    private static final String TAG = \"Rotate3DAnimation\";\n\n    private final float mFromDegrees;\n    private final float mToDegrees;\n    private final float mMarginLeft;\n    private final float mMarginTop;\n    // private final float mDepthZ;\n    private final float mAnimationScale;\n    private boolean reverse;\n    private Camera mCamera;\n\n    // 旋转中心\n    private float mPivotX;\n    private float mPivotY;\n\n    private float scale = 1;    // <------- 像素密度\n\n    public Rotate3DAnimation(Context context, float mFromDegrees, float mToDegrees, float mMarginLeft, float mMarginTop,\n                             float animationScale, boolean reverse) {\n        this.mFromDegrees = mFromDegrees;\n        this.mToDegrees = mToDegrees;\n        this.mMarginLeft = mMarginLeft;\n        this.mMarginTop = mMarginTop;\n        this.mAnimationScale = animationScale;\n        this.reverse = reverse;\n\n        // 获取手机像素密度 （即dp与px的比例）\n        scale = context.getResources().getDisplayMetrics().density;\n    }\n\n    @Override\n    public void initialize(int width, int height, int parentWidth, int parentHeight) {\n        super.initialize(width, height, parentWidth, parentHeight);\n\n        mCamera = new Camera();\n        mPivotX = calculatePivotX(mMarginLeft, parentWidth, width);\n        mPivotY = calculatePivotY(mMarginTop, parentHeight, height);\n        Log.i(TAG,\"width:\"+width+\",height:\"+height+\",pw:\"+parentWidth+\",ph:\"+parentHeight);\n        Log.i(TAG,\"中心点x:\"+mPivotX+\",中心点y:\"+mPivotY);\n    }\n\n    @Override\n    protected void applyTransformation(float interpolatedTime, Transformation t) {\n        super.applyTransformation(interpolatedTime, t);\n\n        float degrees = reverse ? mToDegrees + (mFromDegrees - mToDegrees) * interpolatedTime : mFromDegrees + (mToDegrees - mFromDegrees) * interpolatedTime;\n        Matrix matrix = t.getMatrix();\n\n        Camera camera = mCamera;\n        camera.save();\n        camera.rotateY(degrees);\n        camera.getMatrix(matrix);\n        camera.restore();\n\n        // 修正失真，主要修改 MPERSP_0 和 MPERSP_1\n        float[] mValues = new float[9];\n        matrix.getValues(mValues);                //获取数值\n        mValues[6] = mValues[6] / scale;            //数值修正\n        mValues[7] = mValues[7] / scale;            //数值修正\n        matrix.setValues(mValues);                //重新赋值\n\n        if (reverse) {\n            matrix.postScale(1 + (mAnimationScale - 1) * interpolatedTime, 1 + (mAnimationScale - 1) * interpolatedTime,\n                    mPivotX - mMarginLeft, mPivotY - mMarginTop);\n        } else {\n            matrix.postScale(1 + (mAnimationScale - 1) * (1 - interpolatedTime), 1 + (mAnimationScale - 1) * (1 - interpolatedTime),\n                    mPivotX - mMarginLeft, mPivotY - mMarginTop);\n        }\n    }\n\n    /**\n     * 计算缩放的中心点的横坐标\n     *\n     * @param marginLeft  该View距离父布局左边的距离\n     * @param parentWidth 父布局的宽度\n     * @param width       View的宽度\n     * @return 缩放中心点的横坐标\n     */\n    public float calculatePivotX(float marginLeft, float parentWidth, float width) {\n        return parentWidth * marginLeft / (parentWidth - width);\n    }\n\n\n    /**\n     * 计算缩放的中心点的纵坐标\n     *\n     * @param marginTop    该View顶部距离父布局顶部的距离\n     * @param parentHeight 父布局的高度\n     * @param height       子布局的高度\n     * @return 缩放的中心点的纵坐标\n     */\n    public float calculatePivotY(float marginTop, float parentHeight, float height) {\n        return parentHeight * marginTop / (parentHeight - height);\n    }\n\n    public void reverse() {\n        reverse = !reverse;\n    }\n}\n```\n计算缩放点我们在上面已经讨论过，这里我们就只看函数`applyTransformation(float interpolatedTime, Transformation t)`，我们先判断我们当前是打开书还是合上书的状态（这两个状态使得动画正好相反），计算好当前旋转度数再取得Camera，利用`camera.rotateY(degrees)`实现书本围绕Y轴旋转，之后拿到我们的矩阵，围绕计算出的中心点进行缩放。\n**3. 使用**\n 这一步我们需要将动画运用到我们的界面上去，当点击我们的RecyclerView的时候，我们需要取出RecyclerView中的`子View中的ImageView`，在适配器中利用监听器传出：\n```\npublic interface OnBookClickListener{\n    void onItemClick(int pos,View view);\n}\n```\n接着，我们在`OpenBookActivity`中实现`OnBookClickListener`接口，省略了一些代码：\n```\npublic class OpenBookActivity extends AppCompatActivity implements Animation.AnimationListener,BookAdapter.OnBookClickListener {\n    private static final String TAG = \"OpenBookActivity\";\n\n    //  一系列变量 此处省略\n    ... \n    // 记录View的位置\n    private int[] location = new int[2];\n    // 内容页\n    private ImageView mContent;\n    // 封面\n    private ImageView mFirst;\n    // 缩放动画\n    private ContentScaleAnimation scaleAnimation;\n    // 3D旋转动画\n    private Rotate3DAnimation threeDAnimation;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_book);\n\n        initWidget();\n    }\n\n    private void initWidget() {\n        ...\n\n        // 获取状态栏高度\n        statusHeight = -1;\n        //获取status_bar_height资源的ID\n        int resourceId = getResources().getIdentifier(\"status_bar_height\", \"dimen\", \"android\");\n        if (resourceId > 0) {\n            //根据资源ID获取响应的尺寸值\n            statusHeight = getResources().getDimensionPixelSize(resourceId);\n        }\n\n        initData();\n        ...\n    }\n\n    // 重复添加数据\n    private void initData() {\n        for(int i = 0;i<10;i++){\n            values.add(R.drawable.preview);\n        }\n    }\n\n    @Override\n    protected void onRestart() {\n        super.onRestart();\n\n        // 当界面重新进入的时候进行合书的动画\n        if(isOpenBook) {\n            scaleAnimation.reverse();\n            threeDAnimation.reverse();\n            mFirst.clearAnimation();\n            mFirst.startAnimation(threeDAnimation);\n            mContent.clearAnimation();\n            mContent.startAnimation(scaleAnimation);\n        }\n    }\n\n    @Override\n    public void onAnimationEnd(Animation animation) {\n        if(scaleAnimation.hasEnded() && threeDAnimation.hasEnded()) {\n            // 两个动画都结束的时候再处理后续操作\n            if (!isOpenBook) {\n                isOpenBook = true;\n                BookSampleActivity.show(this);\n            } else {\n                isOpenBook = false;\n                mFirst.clearAnimation();\n                mContent.clearAnimation();\n                mFirst.setVisibility(View.GONE);\n                mContent.setVisibility(View.GONE);\n            }\n        }\n    }\n\n    @Override\n    public void onItemClick(int pos,View view) {\n        mFirst.setVisibility(View.VISIBLE);\n        mContent.setVisibility(View.VISIBLE);\n\n        // 计算当前的位置坐标\n        view.getLocationInWindow(location);\n        int width = view.getWidth();\n        int height = view.getHeight();\n\n        // 两个ImageView设置大小和位置\n        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mFirst.getLayoutParams();\n        params.leftMargin = location[0];\n        params.topMargin = location[1] - statusHeight;\n        params.width = width;\n        params.height = height;\n        mFirst.setLayoutParams(params);\n        mContent.setLayoutParams(params);\n        //  设置内容\n        Bitmap contentBitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);\n        contentBitmap.eraseColor(getResources().getColor(R.color.read_theme_yellow));\n        mContent.setImageBitmap(contentBitmap);\n        // 设置封面\n        Bitmap coverBitmap = BitmapFactory.decodeResource(getResources(),values.get(pos));\n        mFirst.setImageBitmap(coverBitmap);\n        // 设置封面\n        initAnimation(view);\n        Log.i(TAG,\"left:\"+mFirst.getLeft()+\"top:\"+mFirst.getTop());\n\n        mContent.clearAnimation();\n        mContent.startAnimation(scaleAnimation);\n        mFirst.clearAnimation();\n        mFirst.startAnimation(threeDAnimation);\n    }\n\n    // 初始化动画\n    private void initAnimation(View view) {\n        float viewWidth = view.getWidth();\n        float viewHeight = view.getHeight();\n\n        DisplayMetrics displayMetrics = new DisplayMetrics();\n        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);\n        float maxWidth = displayMetrics.widthPixels;\n        float maxHeight = displayMetrics.heightPixels;\n        float horScale = maxWidth / viewWidth;\n        float verScale = maxHeight / viewHeight;\n        float scale = horScale > verScale ? horScale : verScale;\n\n        scaleAnimation = new ContentScaleAnimation(location[0], location[1], scale, false);\n        scaleAnimation.setInterpolator(new DecelerateInterpolator());  //设置插值器\n        scaleAnimation.setDuration(1000);\n        scaleAnimation.setFillAfter(true);  //动画停留在最后一帧\n        scaleAnimation.setAnimationListener(OpenBookActivity.this);\n\n        threeDAnimation = new Rotate3DAnimation(OpenBookActivity.this, -180, 0\n                , location[0], location[1], scale, true);\n        threeDAnimation.setDuration(1000);                         //设置动画时长\n        threeDAnimation.setFillAfter(true);                        //保持旋转后效果\n        threeDAnimation.setInterpolator(new DecelerateInterpolator());\n    }\n}\n```\n第一个重点是复写的`OnBookClickListener`中的`onItemClick`方法，在该方法中：\n- 我们根据取得的`view`(实际上是子View中的ImageView)，计算出当前界面的两个ImageView的位置和大小。\n- 计算缩放参数和播放动画的顺序，展开动画，和处理动画结束后的事件。\n\n第二个重点是中心回到当前界面的时候，合上书的动画，就是刚刚的动画倒过来执行，在`onRestart() `方法中执行，执行完成之后隐藏两个`ImageVIew`。\n## 四. 总结\n总的来说就是`Camera`和`Animation`的简单使用，本人水平有限，难免不足，欢迎提出。\n项目地址：[Test](https://github.com/mCyp/Test)\nOver~\n\n引用：\n[Matrix Camera](https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md)\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"2019-01-20-仿掌阅实现书籍打开动画","published":1,"updated":"2019-02-06T07:15:01.514Z","photos":[],"link":"","_id":"cjru5wh220009ucxpddqdzc81","content":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/190120/high-definition-wallpapers-for-android.jpg\" alt=\"安卓机器人.png\"></p>\n<a id=\"more\"></a>\n<h2 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一. 前言\"></a>一. 前言</h2><p>上次打开掌阅的时候看到书籍打开动画的效果还不错，正好最近也在做阅读器的项目，所以想在项目中实现一下。</p>\n<h2 id=\"二-思路\"><a href=\"#二-思路\" class=\"headerlink\" title=\"二. 思路\"></a>二. 思路</h2><p>讲思路之前，先看一下实现效果吧：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-ae84076770395175.gif?imageMogr2/auto-orient/strip\" alt=\"书籍打开关闭动画.gif\"></p>\n<p>看完实现效果，我们再来讲一下实现思路：<img src=\"https://upload-images.jianshu.io/upload_images/9271486-e06ee7f20473b793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"书籍打开动画的思路.png\"></p>\n<ol>\n<li>获取<code>RecyclerView</code>（或<code>GridView</code>）中的<code>子View里面的ImageView</code>在屏幕的位置，因为获取的是Window下的位置，所以Y轴位置取出来还要减去<code>状态栏的高度</code>。</li>\n<li>图书的封面和内容页（其实是两个<code>ImageView</code>）设置成刚刚取出的<code>子View里面的ImageView</code>的位置和大小。</li>\n<li>设置动画，这边缩放动画的轴心点的计算方式需要注意一下，等下文讲解代码的时候再具体解释，还有就是利用<code>Camera</code>类（非平常的相机类）实现的打开和关闭动画（如果你对Camera不熟悉，建议先看GcsSloop大佬的这篇<a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md\" target=\"_blank\" rel=\"noopener\">Matrix Camera</a>）。<h2 id=\"三-具体实现\"><a href=\"#三-具体实现\" class=\"headerlink\" title=\"三. 具体实现\"></a>三. 具体实现</h2>我会在这个过程中一步一步教你如何实现这个效果：<br><strong>1. 布局</strong><br><code>activity_open_book.xml</code>:<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">\".ui.activity.OpenBookActivity\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v7</span><span class=\"selector-class\">.widget</span><span class=\"selector-class\">.RecyclerView</span></span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/recycle\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"match_parent\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/img_content\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:<span class=\"attribute\">visibility</span>=<span class=\"string\">\"gone\"</span></span><br><span class=\"line\">        android:contentDescription=<span class=\"string\">\"@string/app_name\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/img_first\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:scaleType=<span class=\"string\">\"centerCrop\"</span></span><br><span class=\"line\">        android:<span class=\"attribute\">visibility</span>=<span class=\"string\">\"gone\"</span></span><br><span class=\"line\">        android:contentDescription=<span class=\"string\">\"@string/app_name\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>recycler_item_book.xml:</code><br><code>RecylerVIew</code>中的子布局，其实也就是<code>ImageView</code>和<code>TextView</code>，这里就不贴放了。</p>\n<p><strong>2. 动画</strong><br> 我们只讲解旋转动画，因为旋转动画中也会涉及缩放动画。想一下，如果想要在界面中实现缩放动画，我们得找好轴心点，那么，轴心点的x，y坐标如何计算呢？为了更好的求出坐标，我们先来看一张图：<img src=\"https://upload-images.jianshu.io/upload_images/9271486-5cd93e6016701955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"缩放讲解图.png\"><br>我们可以得出这样的公式：<code>x / pl = vr / pr</code>，而对于<code>pl</code>、<code>vr</code>和<code>pr</code>，则有<code>pl = ml + x</code>，<code>vr = w - x</code>和<code>pr = pw -pl</code>，综合以上的公式，最终我们可以得出的<code>x = ml * pw / (pw - w)</code>，y的坐标可以用同样的方式求得。下面我们来看代码：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class Rotate3DAnimation extends Animation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> TAG = <span class=\"string\">\"Rotate3DAnimation\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mFromDegrees;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mToDegrees;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mMarginLeft;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mMarginTop;</span><br><span class=\"line\">    <span class=\"comment\">// private final float mDepthZ;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mAnimationScale;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">boolean</span> <span class=\"built_in\">reverse</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Camera mCamera;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 旋转中心</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> mPivotX;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> mPivotY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> <span class=\"built_in\">scale</span> = <span class=\"number\">1</span>;    <span class=\"comment\">// &lt;------- 像素密度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Rotate3DAnimation(Context context, <span class=\"built_in\">float</span> mFromDegrees, <span class=\"built_in\">float</span> mToDegrees, <span class=\"built_in\">float</span> mMarginLeft, <span class=\"built_in\">float</span> mMarginTop,</span><br><span class=\"line\">                             <span class=\"built_in\">float</span> animationScale, <span class=\"built_in\">boolean</span> <span class=\"built_in\">reverse</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mFromDegrees = mFromDegrees;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mToDegrees = mToDegrees;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mMarginLeft = mMarginLeft;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mMarginTop = mMarginTop;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mAnimationScale = animationScale;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"built_in\">reverse</span> = <span class=\"built_in\">reverse</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取手机像素密度 （即dp与px的比例）</span></span><br><span class=\"line\">        <span class=\"built_in\">scale</span> = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> initialize(<span class=\"built_in\">int</span> <span class=\"built_in\">width</span>, <span class=\"built_in\">int</span> <span class=\"built_in\">height</span>, <span class=\"built_in\">int</span> parentWidth, <span class=\"built_in\">int</span> parentHeight) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initialize(<span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, parentWidth, parentHeight);</span><br><span class=\"line\"></span><br><span class=\"line\">        mCamera = <span class=\"keyword\">new</span> Camera();</span><br><span class=\"line\">        mPivotX = calculatePivotX(mMarginLeft, parentWidth, <span class=\"built_in\">width</span>);</span><br><span class=\"line\">        mPivotY = calculatePivotY(mMarginTop, parentHeight, <span class=\"built_in\">height</span>);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"width:\"</span>+<span class=\"built_in\">width</span>+<span class=\"string\">\",height:\"</span>+<span class=\"built_in\">height</span>+<span class=\"string\">\",pw:\"</span>+parentWidth+<span class=\"string\">\",ph:\"</span>+parentHeight);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"中心点x:\"</span>+mPivotX+<span class=\"string\">\",中心点y:\"</span>+mPivotY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> applyTransformation(<span class=\"built_in\">float</span> interpolatedTime, Transformation t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.applyTransformation(interpolatedTime, t);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">float</span> <span class=\"built_in\">degrees</span> = <span class=\"built_in\">reverse</span> ? mToDegrees + (mFromDegrees - mToDegrees) * interpolatedTime : mFromDegrees + (mToDegrees - mFromDegrees) * interpolatedTime;</span><br><span class=\"line\">        Matrix matrix = t.getMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">        Camera <span class=\"built_in\">camera</span> = mCamera;</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.<span class=\"built_in\">save</span>();</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.<span class=\"built_in\">rotateY</span>(<span class=\"built_in\">degrees</span>);</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.getMatrix(matrix);</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.restore();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修正失真，主要修改 MPERSP_0 和 MPERSP_1</span></span><br><span class=\"line\">        <span class=\"built_in\">float</span>[] mValues = <span class=\"keyword\">new</span> <span class=\"built_in\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        matrix.getValues(mValues);                <span class=\"comment\">//获取数值</span></span><br><span class=\"line\">        mValues[<span class=\"number\">6</span>] = mValues[<span class=\"number\">6</span>] / <span class=\"built_in\">scale</span>;            <span class=\"comment\">//数值修正</span></span><br><span class=\"line\">        mValues[<span class=\"number\">7</span>] = mValues[<span class=\"number\">7</span>] / <span class=\"built_in\">scale</span>;            <span class=\"comment\">//数值修正</span></span><br><span class=\"line\">        matrix.setValues(mValues);                <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">reverse</span>) &#123;</span><br><span class=\"line\">            matrix.postScale(<span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * interpolatedTime, <span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * interpolatedTime,</span><br><span class=\"line\">                    mPivotX - mMarginLeft, mPivotY - mMarginTop);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matrix.postScale(<span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * (<span class=\"number\">1</span> - interpolatedTime), <span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * (<span class=\"number\">1</span> - interpolatedTime),</span><br><span class=\"line\">                    mPivotX - mMarginLeft, mPivotY - mMarginTop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算缩放的中心点的横坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param marginLeft  该View距离父布局左边的距离</span></span><br><span class=\"line\"><span class=\"comment\">     * @param parentWidth 父布局的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * @param width       View的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 缩放中心点的横坐标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">float</span> calculatePivotX(<span class=\"built_in\">float</span> marginLeft, <span class=\"built_in\">float</span> parentWidth, <span class=\"built_in\">float</span> <span class=\"built_in\">width</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentWidth * marginLeft / (parentWidth - <span class=\"built_in\">width</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算缩放的中心点的纵坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param marginTop    该View顶部距离父布局顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\">     * @param parentHeight 父布局的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * @param height       子布局的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 缩放的中心点的纵坐标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">float</span> calculatePivotY(<span class=\"built_in\">float</span> marginTop, <span class=\"built_in\">float</span> parentHeight, <span class=\"built_in\">float</span> <span class=\"built_in\">height</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentHeight * marginTop / (parentHeight - <span class=\"built_in\">height</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span> = !<span class=\"built_in\">reverse</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>计算缩放点我们在上面已经讨论过，这里我们就只看函数<code>applyTransformation(float interpolatedTime, Transformation t)</code>，我们先判断我们当前是打开书还是合上书的状态（这两个状态使得动画正好相反），计算好当前旋转度数再取得Camera，利用<code>camera.rotateY(degrees)</code>实现书本围绕Y轴旋转，之后拿到我们的矩阵，围绕计算出的中心点进行缩放。<br><strong>3. 使用</strong><br> 这一步我们需要将动画运用到我们的界面上去，当点击我们的RecyclerView的时候，我们需要取出RecyclerView中的<code>子View中的ImageView</code>，在适配器中利用监听器传出：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>OnBookClickListener&#123;</span><br><span class=\"line\">    void onItemClick(int pos,View view);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着，我们在<code>OpenBookActivity</code>中实现<code>OnBookClickListener</code>接口，省略了一些代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenBookActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animation</span>.<span class=\"title\">AnimationListener</span>,<span class=\"title\">BookAdapter</span>.<span class=\"title\">OnBookClickListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OpenBookActivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  一系列变量 此处省略</span></span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"comment\">// 记录View的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 内容页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mContent;</span><br><span class=\"line\">    <span class=\"comment\">// 封面</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mFirst;</span><br><span class=\"line\">    <span class=\"comment\">// 缩放动画</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ContentScaleAnimation scaleAnimation;</span><br><span class=\"line\">    <span class=\"comment\">// 3D旋转动画</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Rotate3DAnimation threeDAnimation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_book);</span><br><span class=\"line\"></span><br><span class=\"line\">        initWidget();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWidget</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取状态栏高度</span></span><br><span class=\"line\">        statusHeight = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获取status_bar_height资源的ID</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resourceId = getResources().getIdentifier(<span class=\"string\">\"status_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resourceId &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据资源ID获取响应的尺寸值</span></span><br><span class=\"line\">            statusHeight = getResources().getDimensionPixelSize(resourceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        initData();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重复添加数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            values.add(R.drawable.preview);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onRestart();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当界面重新进入的时候进行合书的动画</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isOpenBook) &#123;</span><br><span class=\"line\">            scaleAnimation.reverse();</span><br><span class=\"line\">            threeDAnimation.reverse();</span><br><span class=\"line\">            mFirst.clearAnimation();</span><br><span class=\"line\">            mFirst.startAnimation(threeDAnimation);</span><br><span class=\"line\">            mContent.clearAnimation();</span><br><span class=\"line\">            mContent.startAnimation(scaleAnimation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animation animation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(scaleAnimation.hasEnded() &amp;&amp; threeDAnimation.hasEnded()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 两个动画都结束的时候再处理后续操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isOpenBook) &#123;</span><br><span class=\"line\">                isOpenBook = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                BookSampleActivity.show(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isOpenBook = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                mFirst.clearAnimation();</span><br><span class=\"line\">                mContent.clearAnimation();</span><br><span class=\"line\">                mFirst.setVisibility(View.GONE);</span><br><span class=\"line\">                mContent.setVisibility(View.GONE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(<span class=\"keyword\">int</span> pos,View view)</span> </span>&#123;</span><br><span class=\"line\">        mFirst.setVisibility(View.VISIBLE);</span><br><span class=\"line\">        mContent.setVisibility(View.VISIBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算当前的位置坐标</span></span><br><span class=\"line\">        view.getLocationInWindow(location);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = view.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 两个ImageView设置大小和位置</span></span><br><span class=\"line\">        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mFirst.getLayoutParams();</span><br><span class=\"line\">        params.leftMargin = location[<span class=\"number\">0</span>];</span><br><span class=\"line\">        params.topMargin = location[<span class=\"number\">1</span>] - statusHeight;</span><br><span class=\"line\">        params.width = width;</span><br><span class=\"line\">        params.height = height;</span><br><span class=\"line\">        mFirst.setLayoutParams(params);</span><br><span class=\"line\">        mContent.setLayoutParams(params);</span><br><span class=\"line\">        <span class=\"comment\">//  设置内容</span></span><br><span class=\"line\">        Bitmap contentBitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">        contentBitmap.eraseColor(getResources().getColor(R.color.read_theme_yellow));</span><br><span class=\"line\">        mContent.setImageBitmap(contentBitmap);</span><br><span class=\"line\">        <span class=\"comment\">// 设置封面</span></span><br><span class=\"line\">        Bitmap coverBitmap = BitmapFactory.decodeResource(getResources(),values.get(pos));</span><br><span class=\"line\">        mFirst.setImageBitmap(coverBitmap);</span><br><span class=\"line\">        <span class=\"comment\">// 设置封面</span></span><br><span class=\"line\">        initAnimation(view);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"left:\"</span>+mFirst.getLeft()+<span class=\"string\">\"top:\"</span>+mFirst.getTop());</span><br><span class=\"line\"></span><br><span class=\"line\">        mContent.clearAnimation();</span><br><span class=\"line\">        mContent.startAnimation(scaleAnimation);</span><br><span class=\"line\">        mFirst.clearAnimation();</span><br><span class=\"line\">        mFirst.startAnimation(threeDAnimation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initAnimation</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> viewWidth = view.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">float</span> viewHeight = view.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">        DisplayMetrics displayMetrics = <span class=\"keyword\">new</span> DisplayMetrics();</span><br><span class=\"line\">        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxWidth = displayMetrics.widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxHeight = displayMetrics.heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> horScale = maxWidth / viewWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> verScale = maxHeight / viewHeight;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = horScale &gt; verScale ? horScale : verScale;</span><br><span class=\"line\"></span><br><span class=\"line\">        scaleAnimation = <span class=\"keyword\">new</span> ContentScaleAnimation(location[<span class=\"number\">0</span>], location[<span class=\"number\">1</span>], scale, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        scaleAnimation.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());  <span class=\"comment\">//设置插值器</span></span><br><span class=\"line\">        scaleAnimation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        scaleAnimation.setFillAfter(<span class=\"keyword\">true</span>);  <span class=\"comment\">//动画停留在最后一帧</span></span><br><span class=\"line\">        scaleAnimation.setAnimationListener(OpenBookActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        threeDAnimation = <span class=\"keyword\">new</span> Rotate3DAnimation(OpenBookActivity.<span class=\"keyword\">this</span>, -<span class=\"number\">180</span>, <span class=\"number\">0</span></span><br><span class=\"line\">                , location[<span class=\"number\">0</span>], location[<span class=\"number\">1</span>], scale, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        threeDAnimation.setDuration(<span class=\"number\">1000</span>);                         <span class=\"comment\">//设置动画时长</span></span><br><span class=\"line\">        threeDAnimation.setFillAfter(<span class=\"keyword\">true</span>);                        <span class=\"comment\">//保持旋转后效果</span></span><br><span class=\"line\">        threeDAnimation.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第一个重点是复写的<code>OnBookClickListener</code>中的<code>onItemClick</code>方法，在该方法中：</p>\n<ul>\n<li>我们根据取得的<code>view</code>(实际上是子View中的ImageView)，计算出当前界面的两个ImageView的位置和大小。</li>\n<li>计算缩放参数和播放动画的顺序，展开动画，和处理动画结束后的事件。</li>\n</ul>\n<p>第二个重点是中心回到当前界面的时候，合上书的动画，就是刚刚的动画倒过来执行，在<code>onRestart()</code>方法中执行，执行完成之后隐藏两个<code>ImageVIew</code>。</p>\n<h2 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四. 总结\"></a>四. 总结</h2><p>总的来说就是<code>Camera</code>和<code>Animation</code>的简单使用，本人水平有限，难免不足，欢迎提出。<br>项目地址：<a href=\"https://github.com/mCyp/Test\" target=\"_blank\" rel=\"noopener\">Test</a><br>Over~</p>\n<p>引用：<br><a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md\" target=\"_blank\" rel=\"noopener\">Matrix Camera</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://plew0vk60.bkt.clouddn.com//blog/190120/high-definition-wallpapers-for-android.jpg\" alt=\"安卓机器人.png\"></p>","more":"<h2 id=\"一-前言\"><a href=\"#一-前言\" class=\"headerlink\" title=\"一. 前言\"></a>一. 前言</h2><p>上次打开掌阅的时候看到书籍打开动画的效果还不错，正好最近也在做阅读器的项目，所以想在项目中实现一下。</p>\n<h2 id=\"二-思路\"><a href=\"#二-思路\" class=\"headerlink\" title=\"二. 思路\"></a>二. 思路</h2><p>讲思路之前，先看一下实现效果吧：</p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/9271486-ae84076770395175.gif?imageMogr2/auto-orient/strip\" alt=\"书籍打开关闭动画.gif\"></p>\n<p>看完实现效果，我们再来讲一下实现思路：<img src=\"https://upload-images.jianshu.io/upload_images/9271486-e06ee7f20473b793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"书籍打开动画的思路.png\"></p>\n<ol>\n<li>获取<code>RecyclerView</code>（或<code>GridView</code>）中的<code>子View里面的ImageView</code>在屏幕的位置，因为获取的是Window下的位置，所以Y轴位置取出来还要减去<code>状态栏的高度</code>。</li>\n<li>图书的封面和内容页（其实是两个<code>ImageView</code>）设置成刚刚取出的<code>子View里面的ImageView</code>的位置和大小。</li>\n<li>设置动画，这边缩放动画的轴心点的计算方式需要注意一下，等下文讲解代码的时候再具体解释，还有就是利用<code>Camera</code>类（非平常的相机类）实现的打开和关闭动画（如果你对Camera不熟悉，建议先看GcsSloop大佬的这篇<a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md\" target=\"_blank\" rel=\"noopener\">Matrix Camera</a>）。<h2 id=\"三-具体实现\"><a href=\"#三-具体实现\" class=\"headerlink\" title=\"三. 具体实现\"></a>三. 具体实现</h2>我会在这个过程中一步一步教你如何实现这个效果：<br><strong>1. 布局</strong><br><code>activity_open_book.xml</code>:<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;RelativeLayout xmlns:android=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span><br><span class=\"line\">    xmlns:app=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span><br><span class=\"line\">    xmlns:tools=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    tools:context=<span class=\"string\">\".ui.activity.OpenBookActivity\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android<span class=\"selector-class\">.support</span><span class=\"selector-class\">.v7</span><span class=\"selector-class\">.widget</span><span class=\"selector-class\">.RecyclerView</span></span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/recycle\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"match_parent\"</span>/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/img_content\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:<span class=\"attribute\">visibility</span>=<span class=\"string\">\"gone\"</span></span><br><span class=\"line\">        android:contentDescription=<span class=\"string\">\"@string/app_name\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;ImageView</span><br><span class=\"line\">        android:id=<span class=\"string\">\"@+id/img_first\"</span></span><br><span class=\"line\">        android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">        android:scaleType=<span class=\"string\">\"centerCrop\"</span></span><br><span class=\"line\">        android:<span class=\"attribute\">visibility</span>=<span class=\"string\">\"gone\"</span></span><br><span class=\"line\">        android:contentDescription=<span class=\"string\">\"@string/app_name\"</span> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/RelativeLayout&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>recycler_item_book.xml:</code><br><code>RecylerVIew</code>中的子布局，其实也就是<code>ImageView</code>和<code>TextView</code>，这里就不贴放了。</p>\n<p><strong>2. 动画</strong><br> 我们只讲解旋转动画，因为旋转动画中也会涉及缩放动画。想一下，如果想要在界面中实现缩放动画，我们得找好轴心点，那么，轴心点的x，y坐标如何计算呢？为了更好的求出坐标，我们先来看一张图：<img src=\"https://upload-images.jianshu.io/upload_images/9271486-5cd93e6016701955.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"缩放讲解图.png\"><br>我们可以得出这样的公式：<code>x / pl = vr / pr</code>，而对于<code>pl</code>、<code>vr</code>和<code>pr</code>，则有<code>pl = ml + x</code>，<code>vr = w - x</code>和<code>pr = pw -pl</code>，综合以上的公式，最终我们可以得出的<code>x = ml * pw / (pw - w)</code>，y的坐标可以用同样的方式求得。下面我们来看代码：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class Rotate3DAnimation extends Animation &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">String</span> TAG = <span class=\"string\">\"Rotate3DAnimation\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mFromDegrees;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mToDegrees;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mMarginLeft;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mMarginTop;</span><br><span class=\"line\">    <span class=\"comment\">// private final float mDepthZ;</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"built_in\">float</span> mAnimationScale;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">boolean</span> <span class=\"built_in\">reverse</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Camera mCamera;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 旋转中心</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> mPivotX;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> mPivotY;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"built_in\">float</span> <span class=\"built_in\">scale</span> = <span class=\"number\">1</span>;    <span class=\"comment\">// &lt;------- 像素密度</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Rotate3DAnimation(Context context, <span class=\"built_in\">float</span> mFromDegrees, <span class=\"built_in\">float</span> mToDegrees, <span class=\"built_in\">float</span> mMarginLeft, <span class=\"built_in\">float</span> mMarginTop,</span><br><span class=\"line\">                             <span class=\"built_in\">float</span> animationScale, <span class=\"built_in\">boolean</span> <span class=\"built_in\">reverse</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mFromDegrees = mFromDegrees;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mToDegrees = mToDegrees;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mMarginLeft = mMarginLeft;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mMarginTop = mMarginTop;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.mAnimationScale = animationScale;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.<span class=\"built_in\">reverse</span> = <span class=\"built_in\">reverse</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取手机像素密度 （即dp与px的比例）</span></span><br><span class=\"line\">        <span class=\"built_in\">scale</span> = context.getResources().getDisplayMetrics().density;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> initialize(<span class=\"built_in\">int</span> <span class=\"built_in\">width</span>, <span class=\"built_in\">int</span> <span class=\"built_in\">height</span>, <span class=\"built_in\">int</span> parentWidth, <span class=\"built_in\">int</span> parentHeight) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initialize(<span class=\"built_in\">width</span>, <span class=\"built_in\">height</span>, parentWidth, parentHeight);</span><br><span class=\"line\"></span><br><span class=\"line\">        mCamera = <span class=\"keyword\">new</span> Camera();</span><br><span class=\"line\">        mPivotX = calculatePivotX(mMarginLeft, parentWidth, <span class=\"built_in\">width</span>);</span><br><span class=\"line\">        mPivotY = calculatePivotY(mMarginTop, parentHeight, <span class=\"built_in\">height</span>);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"width:\"</span>+<span class=\"built_in\">width</span>+<span class=\"string\">\",height:\"</span>+<span class=\"built_in\">height</span>+<span class=\"string\">\",pw:\"</span>+parentWidth+<span class=\"string\">\",ph:\"</span>+parentHeight);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"中心点x:\"</span>+mPivotX+<span class=\"string\">\",中心点y:\"</span>+mPivotY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> applyTransformation(<span class=\"built_in\">float</span> interpolatedTime, Transformation t) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.applyTransformation(interpolatedTime, t);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">float</span> <span class=\"built_in\">degrees</span> = <span class=\"built_in\">reverse</span> ? mToDegrees + (mFromDegrees - mToDegrees) * interpolatedTime : mFromDegrees + (mToDegrees - mFromDegrees) * interpolatedTime;</span><br><span class=\"line\">        Matrix matrix = t.getMatrix();</span><br><span class=\"line\"></span><br><span class=\"line\">        Camera <span class=\"built_in\">camera</span> = mCamera;</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.<span class=\"built_in\">save</span>();</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.<span class=\"built_in\">rotateY</span>(<span class=\"built_in\">degrees</span>);</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.getMatrix(matrix);</span><br><span class=\"line\">        <span class=\"built_in\">camera</span>.restore();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 修正失真，主要修改 MPERSP_0 和 MPERSP_1</span></span><br><span class=\"line\">        <span class=\"built_in\">float</span>[] mValues = <span class=\"keyword\">new</span> <span class=\"built_in\">float</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">        matrix.getValues(mValues);                <span class=\"comment\">//获取数值</span></span><br><span class=\"line\">        mValues[<span class=\"number\">6</span>] = mValues[<span class=\"number\">6</span>] / <span class=\"built_in\">scale</span>;            <span class=\"comment\">//数值修正</span></span><br><span class=\"line\">        mValues[<span class=\"number\">7</span>] = mValues[<span class=\"number\">7</span>] / <span class=\"built_in\">scale</span>;            <span class=\"comment\">//数值修正</span></span><br><span class=\"line\">        matrix.setValues(mValues);                <span class=\"comment\">//重新赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">reverse</span>) &#123;</span><br><span class=\"line\">            matrix.postScale(<span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * interpolatedTime, <span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * interpolatedTime,</span><br><span class=\"line\">                    mPivotX - mMarginLeft, mPivotY - mMarginTop);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            matrix.postScale(<span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * (<span class=\"number\">1</span> - interpolatedTime), <span class=\"number\">1</span> + (mAnimationScale - <span class=\"number\">1</span>) * (<span class=\"number\">1</span> - interpolatedTime),</span><br><span class=\"line\">                    mPivotX - mMarginLeft, mPivotY - mMarginTop);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算缩放的中心点的横坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param marginLeft  该View距离父布局左边的距离</span></span><br><span class=\"line\"><span class=\"comment\">     * @param parentWidth 父布局的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * @param width       View的宽度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 缩放中心点的横坐标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">float</span> calculatePivotX(<span class=\"built_in\">float</span> marginLeft, <span class=\"built_in\">float</span> parentWidth, <span class=\"built_in\">float</span> <span class=\"built_in\">width</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentWidth * marginLeft / (parentWidth - <span class=\"built_in\">width</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 计算缩放的中心点的纵坐标</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * @param marginTop    该View顶部距离父布局顶部的距离</span></span><br><span class=\"line\"><span class=\"comment\">     * @param parentHeight 父布局的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * @param height       子布局的高度</span></span><br><span class=\"line\"><span class=\"comment\">     * @return 缩放的中心点的纵坐标</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">float</span> calculatePivotY(<span class=\"built_in\">float</span> marginTop, <span class=\"built_in\">float</span> parentHeight, <span class=\"built_in\">float</span> <span class=\"built_in\">height</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parentHeight * marginTop / (parentHeight - <span class=\"built_in\">height</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"built_in\">reverse</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span> = !<span class=\"built_in\">reverse</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>计算缩放点我们在上面已经讨论过，这里我们就只看函数<code>applyTransformation(float interpolatedTime, Transformation t)</code>，我们先判断我们当前是打开书还是合上书的状态（这两个状态使得动画正好相反），计算好当前旋转度数再取得Camera，利用<code>camera.rotateY(degrees)</code>实现书本围绕Y轴旋转，之后拿到我们的矩阵，围绕计算出的中心点进行缩放。<br><strong>3. 使用</strong><br> 这一步我们需要将动画运用到我们的界面上去，当点击我们的RecyclerView的时候，我们需要取出RecyclerView中的<code>子View中的ImageView</code>，在适配器中利用监听器传出：<br><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public<span class=\"built_in\"> interface </span>OnBookClickListener&#123;</span><br><span class=\"line\">    void onItemClick(int pos,View view);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着，我们在<code>OpenBookActivity</code>中实现<code>OnBookClickListener</code>接口，省略了一些代码：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OpenBookActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">Animation</span>.<span class=\"title\">AnimationListener</span>,<span class=\"title\">BookAdapter</span>.<span class=\"title\">OnBookClickListener</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"OpenBookActivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  一系列变量 此处省略</span></span><br><span class=\"line\">    ... </span><br><span class=\"line\">    <span class=\"comment\">// 记录View的位置</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span>[] location = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 内容页</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mContent;</span><br><span class=\"line\">    <span class=\"comment\">// 封面</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mFirst;</span><br><span class=\"line\">    <span class=\"comment\">// 缩放动画</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ContentScaleAnimation scaleAnimation;</span><br><span class=\"line\">    <span class=\"comment\">// 3D旋转动画</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Rotate3DAnimation threeDAnimation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_book);</span><br><span class=\"line\"></span><br><span class=\"line\">        initWidget();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initWidget</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取状态栏高度</span></span><br><span class=\"line\">        statusHeight = -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//获取status_bar_height资源的ID</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> resourceId = getResources().getIdentifier(<span class=\"string\">\"status_bar_height\"</span>, <span class=\"string\">\"dimen\"</span>, <span class=\"string\">\"android\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resourceId &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//根据资源ID获取响应的尺寸值</span></span><br><span class=\"line\">            statusHeight = getResources().getDimensionPixelSize(resourceId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        initData();</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 重复添加数据</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</span><br><span class=\"line\">            values.add(R.drawable.preview);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRestart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onRestart();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 当界面重新进入的时候进行合书的动画</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isOpenBook) &#123;</span><br><span class=\"line\">            scaleAnimation.reverse();</span><br><span class=\"line\">            threeDAnimation.reverse();</span><br><span class=\"line\">            mFirst.clearAnimation();</span><br><span class=\"line\">            mFirst.startAnimation(threeDAnimation);</span><br><span class=\"line\">            mContent.clearAnimation();</span><br><span class=\"line\">            mContent.startAnimation(scaleAnimation);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationEnd</span><span class=\"params\">(Animation animation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(scaleAnimation.hasEnded() &amp;&amp; threeDAnimation.hasEnded()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 两个动画都结束的时候再处理后续操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!isOpenBook) &#123;</span><br><span class=\"line\">                isOpenBook = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                BookSampleActivity.show(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                isOpenBook = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                mFirst.clearAnimation();</span><br><span class=\"line\">                mContent.clearAnimation();</span><br><span class=\"line\">                mFirst.setVisibility(View.GONE);</span><br><span class=\"line\">                mContent.setVisibility(View.GONE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(<span class=\"keyword\">int</span> pos,View view)</span> </span>&#123;</span><br><span class=\"line\">        mFirst.setVisibility(View.VISIBLE);</span><br><span class=\"line\">        mContent.setVisibility(View.VISIBLE);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 计算当前的位置坐标</span></span><br><span class=\"line\">        view.getLocationInWindow(location);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = view.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = view.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 两个ImageView设置大小和位置</span></span><br><span class=\"line\">        RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) mFirst.getLayoutParams();</span><br><span class=\"line\">        params.leftMargin = location[<span class=\"number\">0</span>];</span><br><span class=\"line\">        params.topMargin = location[<span class=\"number\">1</span>] - statusHeight;</span><br><span class=\"line\">        params.width = width;</span><br><span class=\"line\">        params.height = height;</span><br><span class=\"line\">        mFirst.setLayoutParams(params);</span><br><span class=\"line\">        mContent.setLayoutParams(params);</span><br><span class=\"line\">        <span class=\"comment\">//  设置内容</span></span><br><span class=\"line\">        Bitmap contentBitmap = Bitmap.createBitmap(width,height, Bitmap.Config.ARGB_8888);</span><br><span class=\"line\">        contentBitmap.eraseColor(getResources().getColor(R.color.read_theme_yellow));</span><br><span class=\"line\">        mContent.setImageBitmap(contentBitmap);</span><br><span class=\"line\">        <span class=\"comment\">// 设置封面</span></span><br><span class=\"line\">        Bitmap coverBitmap = BitmapFactory.decodeResource(getResources(),values.get(pos));</span><br><span class=\"line\">        mFirst.setImageBitmap(coverBitmap);</span><br><span class=\"line\">        <span class=\"comment\">// 设置封面</span></span><br><span class=\"line\">        initAnimation(view);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"left:\"</span>+mFirst.getLeft()+<span class=\"string\">\"top:\"</span>+mFirst.getTop());</span><br><span class=\"line\"></span><br><span class=\"line\">        mContent.clearAnimation();</span><br><span class=\"line\">        mContent.startAnimation(scaleAnimation);</span><br><span class=\"line\">        mFirst.clearAnimation();</span><br><span class=\"line\">        mFirst.startAnimation(threeDAnimation);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化动画</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initAnimation</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> viewWidth = view.getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">float</span> viewHeight = view.getHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">        DisplayMetrics displayMetrics = <span class=\"keyword\">new</span> DisplayMetrics();</span><br><span class=\"line\">        getWindow().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxWidth = displayMetrics.widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> maxHeight = displayMetrics.heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> horScale = maxWidth / viewWidth;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> verScale = maxHeight / viewHeight;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> scale = horScale &gt; verScale ? horScale : verScale;</span><br><span class=\"line\"></span><br><span class=\"line\">        scaleAnimation = <span class=\"keyword\">new</span> ContentScaleAnimation(location[<span class=\"number\">0</span>], location[<span class=\"number\">1</span>], scale, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">        scaleAnimation.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());  <span class=\"comment\">//设置插值器</span></span><br><span class=\"line\">        scaleAnimation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        scaleAnimation.setFillAfter(<span class=\"keyword\">true</span>);  <span class=\"comment\">//动画停留在最后一帧</span></span><br><span class=\"line\">        scaleAnimation.setAnimationListener(OpenBookActivity.<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        threeDAnimation = <span class=\"keyword\">new</span> Rotate3DAnimation(OpenBookActivity.<span class=\"keyword\">this</span>, -<span class=\"number\">180</span>, <span class=\"number\">0</span></span><br><span class=\"line\">                , location[<span class=\"number\">0</span>], location[<span class=\"number\">1</span>], scale, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        threeDAnimation.setDuration(<span class=\"number\">1000</span>);                         <span class=\"comment\">//设置动画时长</span></span><br><span class=\"line\">        threeDAnimation.setFillAfter(<span class=\"keyword\">true</span>);                        <span class=\"comment\">//保持旋转后效果</span></span><br><span class=\"line\">        threeDAnimation.setInterpolator(<span class=\"keyword\">new</span> DecelerateInterpolator());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>第一个重点是复写的<code>OnBookClickListener</code>中的<code>onItemClick</code>方法，在该方法中：</p>\n<ul>\n<li>我们根据取得的<code>view</code>(实际上是子View中的ImageView)，计算出当前界面的两个ImageView的位置和大小。</li>\n<li>计算缩放参数和播放动画的顺序，展开动画，和处理动画结束后的事件。</li>\n</ul>\n<p>第二个重点是中心回到当前界面的时候，合上书的动画，就是刚刚的动画倒过来执行，在<code>onRestart()</code>方法中执行，执行完成之后隐藏两个<code>ImageVIew</code>。</p>\n<h2 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四. 总结\"></a>四. 总结</h2><p>总的来说就是<code>Camera</code>和<code>Animation</code>的简单使用，本人水平有限，难免不足，欢迎提出。<br>项目地址：<a href=\"https://github.com/mCyp/Test\" target=\"_blank\" rel=\"noopener\">Test</a><br>Over~</p>\n<p>引用：<br><a href=\"https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B11%5DMatrix_3D_Camera.md\" target=\"_blank\" rel=\"noopener\">Matrix Camera</a></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjru5wh1l0000ucxpa2ru4m2q","tag_id":"cjru5wh1t0002ucxph8pkubu2","_id":"cjru5wh1w0005ucxpwcj07o1k"},{"post_id":"cjru5wh1l0000ucxpa2ru4m2q","tag_id":"cjru5wh1v0003ucxpw78uzljm","_id":"cjru5wh1w0006ucxpa2wykkjz"},{"post_id":"cjru5wh1q0001ucxpc2kfx6ch","tag_id":"cjru5wh1v0004ucxpyuq2uj6k","_id":"cjru5wh1w0007ucxpcnm0q8d7"},{"post_id":"cjru5wh210008ucxpjdt11n99","tag_id":"cjru5wh23000aucxp0vz1f88p","_id":"cjru5wh24000cucxp7i7d0hga"},{"post_id":"cjru5wh210008ucxpjdt11n99","tag_id":"cjru5wh1v0003ucxpw78uzljm","_id":"cjru5wh24000ducxp7kwipyie"},{"post_id":"cjru5wh220009ucxpddqdzc81","tag_id":"cjru5wh1t0002ucxph8pkubu2","_id":"cjru5wh24000eucxpudh5ndg6"},{"post_id":"cjru5wh220009ucxpddqdzc81","tag_id":"cjru5wh24000bucxpy78pm3xa","_id":"cjru5wh24000fucxpvt5wzrbd"}],"Tag":[{"name":"Android","_id":"cjru5wh1t0002ucxph8pkubu2"},{"name":"自定义View","_id":"cjru5wh1v0003ucxpw78uzljm"},{"name":"总结","_id":"cjru5wh1v0004ucxpyuq2uj6k"},{"name":"基础","_id":"cjru5wh23000aucxp0vz1f88p"},{"name":"动画","_id":"cjru5wh24000bucxpy78pm3xa"}]}}